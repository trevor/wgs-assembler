
#if 0
/* set the mean & variance according to the edge */
m1 = edge->distance.mean;
v1 = edge->distance.variance;

/* now set the mean and varience according to the assembly */
/* start by determining orientation of the unitigs in the assembly */
if (ci->offsetAEnd.mean <= ci->offsetBEnd.mean) {
  ciLeft = &ci->offsetAEnd;	// ci oriented AB
  ciRight = &ci->offsetBEnd;
  oriFlag = 0;
} else {
  ciLeft = &ci->offsetBEnd;	// ci oriented BA
  ciRight = &ci->offsetAEnd;
  oriFlag = 1;
}
if (mate->offsetAEnd.mean <= mate->offsetBEnd.mean) {
  mateLeft = &(mate->offsetAEnd);	// mate oriented AB
  mateRight = &(mate->offsetBEnd);
} else {
  mateLeft = &(mate->offsetBEnd);	// mate oriented BA
  mateRight = &(mate->offsetAEnd);
  ++oriFlag;
}

/* If oriFlag is even, unitigs have same relative orientation */
ulm.status = AS_IN_ASSEMBLY;
if (oriFlag == 1) {
  if (edge->orient == AB_AB || edge->orient == BA_BA)
    ulm.status = AS_BAD;
} else if (edge->orient == AB_BA || edge->orient == BA_AB)
     ulm.status = AS_BAD;

     if (ulm.status == AS_IN_ASSEMBLY) {

       /* now look at the distance from the right side of the left
          unitig to the left side of the right unitig */
       if (ciLeft->mean <= mateLeft->mean) {
         m2 = mateLeft->mean - ciRight->mean;
         v2 = mateLeft->variance - ciRight->variance;
       } else {
         m2 = ciLeft->mean - mateRight->mean;
         v2 = ciLeft->variance - mateRight->variance;
       }

       //	  assert(v2 >= 0.0);
       if(v2 <= 0.0){
         fprintf(GlobalData->stderrc,"* Edge between CIs " F_CID " [%d+/-%g,%d+/-%g] and " F_CID " [%d+/-%g,%d+/-%g] has mean:%g var:%g =>1.0\n",
                 edge->idA, 
                 (int)ci->offsetAEnd.mean, ci->offsetAEnd.variance,
                 (int)ci->offsetBEnd.mean, ci->offsetBEnd.variance,
                 edge->idB,
                 (int)mate->offsetAEnd.mean, mate->offsetAEnd.variance,
                 (int)mate->offsetBEnd.mean, mate->offsetBEnd.variance,
                 m2, v2);
         v2 = 1.0;
       }
       if (!PairwiseChiSquare(m1,v1,m2,v2,NULL,&rv,
                              PAIRWISECHI2THRESHOLD_CGW))
         ulm.status = AS_BAD;
     }
}
#endif
