
/**************************************************************************
 * This file is part of Celera Assembler, a software program that 
 * assembles whole-genome shotgun reads into contigs and scaffolds.
 * Copyright (C) 1999-2004, Applera Corporation. All rights reserved.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received (LICENSE.txt) a copy of the GNU General Public 
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *************************************************************************/

/* euidStub.h
   Generated by gSOAP 2.3 rev 2 from EUIDServer.h
   Copyright (C) 2001-2003 Genivia inc.
   All Rights Reserved.
*/
#ifndef euidStub_H
#define euidStub_H
#include "stdsoap2.h"
#ifdef __cplusplus
extern "C" {
#endif

SOAP_BEGIN_NAMESPACE(euid)

/* Enumerations */

#ifndef _SOAP__Enum1
#define _SOAP__Enum1
enum _Enum1 {false_ = 0, true_ = 1};
#endif

/* Classes and Structs */

/* impl:getEUIDNamespacesResponse: */
struct impl__getEUIDNamespacesResponse
{
	struct ArrayOf_USCORE_xsd_USCORE_string *_getEUIDNamespacesReturn;	/* return */
};

/* impl:getEUIDResponse: */
struct impl__getEUIDResponse
{
	LONG64 _getEUIDReturn;	/* return */
};

/* Array of xsd:string schema type: */
struct ArrayOf_USCORE_xsd_USCORE_string
{
	char **__ptr;
	int __size;
	int __offset;
};

/* impl:pingResponse: */
struct impl__pingResponse
{
	enum _Enum1 _pingReturn;	/* return */
};

/* impl:hasEUIDNamespaceResponse: */
struct impl__hasEUIDNamespaceResponse
{
	enum _Enum1 _hasEUIDNamespaceReturn;	/* return */
};

/* impl:getEUIDBlockResponse: */
struct impl__getEUIDBlockResponse
{
	LONG64 _getEUIDBlockReturn;	/* return */
};

/* impl:ping: */
struct impl__ping
{
	char blah;
};

/* impl:getEUIDNamespaces: */
struct impl__getEUIDNamespaces
{
	char foo;
};

/* impl:getEUIDBlock: */
struct impl__getEUIDBlock
{
	char *in0;
	int in1;
};

/* impl:getEUID: */
struct impl__getEUID
{
	char *in0;
};

/* impl:hasEUIDNamespace: */
struct impl__hasEUIDNamespace
{
	char *in0;
};

/* SOAP Header: */
struct SOAP_ENV__Header
{
	void *dummy;	/* transient */
};

/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
	char *SOAP_ENV__Value;
	char *SOAP_ENV__Node;
	char *SOAP_ENV__Role;
};

/* SOAP Fault: */
struct SOAP_ENV__Fault
{
	char *faultcode;
	char *faultstring;
	char *faultactor;
	char *detail;
	struct SOAP_ENV__Code *SOAP_ENV__Code;
	char *SOAP_ENV__Reason;
	char *SOAP_ENV__Detail;
};

/* Types With Custom (De)serializers: */

/* Typedefs */
typedef char *_QName;
typedef char *xsd__string;
typedef int xsd__int;
typedef LONG64 xsd__long;
typedef enum _Enum1 xsd__boolean;

/* Extern */

/* Remote Methods */

SOAP_FMAC3 int SOAP_FMAC4 impl__ping(struct soap*, struct impl__pingResponse *);

SOAP_FMAC3 int SOAP_FMAC4 impl__getEUIDNamespaces(struct soap*, struct impl__getEUIDNamespacesResponse *);

SOAP_FMAC3 int SOAP_FMAC4 impl__getEUIDBlock(struct soap*, char *, int, struct impl__getEUIDBlockResponse *);

SOAP_FMAC3 int SOAP_FMAC4 impl__getEUID(struct soap*, char *, struct impl__getEUIDResponse *);

SOAP_FMAC3 int SOAP_FMAC4 impl__hasEUIDNamespace(struct soap*, char *, struct impl__hasEUIDNamespaceResponse *);

/* Stubs */

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impl__ping(struct soap*, const char*, const char*, struct impl__pingResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impl__getEUIDNamespaces(struct soap*, const char*, const char*, struct impl__getEUIDNamespacesResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impl__getEUIDBlock(struct soap*, const char*, const char*, char *, int, struct impl__getEUIDBlockResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impl__getEUID(struct soap*, const char*, const char*, char *, struct impl__getEUIDResponse *);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_impl__hasEUIDNamespace(struct soap*, const char*, const char*, char *, struct impl__hasEUIDNamespaceResponse *);

/* Skeletons */

SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impl__ping(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impl__getEUIDNamespaces(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impl__getEUIDBlock(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impl__getEUID(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_impl__hasEUIDNamespace(struct soap*);

SOAP_END_NAMESPACE(euid)

#ifdef __cplusplus
}
#endif

#endif

/* end of euidStub.h */
