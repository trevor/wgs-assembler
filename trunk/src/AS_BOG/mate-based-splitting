How Unhappy contained fragment ejection works.


This is now an integral part of the mate based splitting.  That routine is now:

1 - moveContains()
2 - splitDiscontinuous()
3 - split()
4 - splitDiscontinuous()
5 - moveContains()
6 - splitDiscontinuous()

====================
Step 1 was suggested by Granger.  I argue the motivation for it is
that a contained fragment will have a high chance of being placed
incorrectly without using the mate relationship.  By moving the
contained frag out now, we don't penalize what could be otherwise an
perfectly good unitig.

====================
Step 2 _should_ do nothing.  By ejecting just unhappy contained
fragments, the unitig should still be connected.  Yes, the code tells
you this fact.

====================
Step 3 does the mate-based splitting.  As far as I'm concerned, the
Splitting Genie came in and chopped unitigs at specific fragment
positions.  A small detail; The split code does not make a perfect
vertical slice through a unitig.  It splits all fragments LISTED IN
THE UNITIG STRUCTURE before that point.  It does not take all
fragments that are PLACED before that point.  In particular, if the
right end of fragment A is the split point, and fragment B is
contained in A, fragment B -- which comes after the split point in the
unitig structure -- remains where it is.  The split is illustrated by:

A----------------*  /
 /-=-=-=-=-=-=-=-=-/
/   B---^---
      C-^--
             D-----------------

The * is where we split, but effectively, we draw a thick line
separating A from the rest of the unitig.  The ^ indicates that
fragment is contained.

====================
Step 4 cleans up after splitting.  It catches this case:

A----------------*
   B---^---
      C-^--
             D-----------------

After A is split off, fragments B and C are not connected to the rest
of the unitig, and need to be moved to a new unitig.

As a special case, if there is only one fragment to be split off, and
that fragment is not mated, and he is contained, he is moved to the
unitig of his container.  This could be generalized to catch more than
one contained unmated fragment.

====================
Step 5 does the unhappy contained fragment ejection.

This code does two things.  First, it moves fragments that have lost
their container due to splitting.  Second, it ejects unhappily mated
contained fragmetns.  They're both handled by the same algorith.

A) eject all contained fragments that are in a unitig
without their container, but only if they are not happy.

B) eject all contained fragments that are not happy.

For each fragment in the unitig:

1) If the fragment is not contained, do nothing.  Leave it here.

2) [Unappy contained fragment ejection] If his container is in this
unitig, but the mate is unhappy, eject.  Otherwise, leave here.  If
both ends of an unhappy mate are contained, eject BOTH.

3) [Orphaned contained fragment ejection] Fragment is contained, but
the container is in a different unitig.  If the fragment is not mated,
move to the unitig of the container.  If mated and happy and an
overlap exists to some other fragment in this unitig, leave it here.
Otherwise, eject to a singleton.

====================
Step 6 again cleans up.  Here's an example:

A---------------*
   B---^-- -> :-)
      C-^------  -> :-(
             D-----------------

(Arrow and smiley shows where the mate is, and happy or sad mate).

Step 3 splits at fragment A.  The resulting unitig is still connected,
so step 4 does nothing.  Step 5 leaves fragment B where it is beacuse
it's happy.  Step 5 next examines fragment C, and notices that it's
not happy, and ejects it.  This leaves the unitig disconnected.

This case has no problem:

A---------------*
   B---^------- -> :-(
      C-^---
             D-----------------

Step 3 splits at fragment A.  The resulting unitig is still connected,
so step 4 does nothing.  Step 5 ejects fragment B because it is
unhappy.  Step 5 next examines fragment C, and notices that it's
container is gone, and will move it there.  Step 6 has nothing to do,
as the unitig (now just fragment D) is conntected.

