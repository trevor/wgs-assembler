{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f36\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier (PCL6);}
{\f68\froman\fcharset238\fprq2 Times New Roman CE;}{\f69\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f71\froman\fcharset161\fprq2 Times New Roman Greek;}{\f72\froman\fcharset162\fprq2 Times New Roman Tur;}
{\f73\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f74\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f75\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f76\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\f88\fmodern\fcharset238\fprq1 Courier New CE;}{\f89\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f91\fmodern\fcharset161\fprq1 Courier New Greek;}{\f92\fmodern\fcharset162\fprq1 Courier New Tur;}{\f93\fmodern\fcharset177\fprq1 Courier New (Hebrew);}
{\f94\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f95\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f96\fmodern\fcharset163\fprq1 Courier New (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;
\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;
\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{\*\cs10 \additive \ssemihidden Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}{\s15\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\adjustright\rin0\lin0\itap0 
\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext15 header;}{\s16\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext16 footer;}{
\s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext17 Indent;}{\s18\ql \li0\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin0\itap0 
\b\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon15 \snext18 Myheader;}{\s19\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext19 Plain Text;}{\*\cs20 
\additive \ul\cf2 \sbasedon10 Hyperlink;}{\*\cs21 \additive \ul\cf12 \sbasedon10 FollowedHyperlink;}}{\*\listtable{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0
\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid913707732}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid1530872176}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid1633056447}{\list\listtemplateid1057524370\listsimple{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li720\jclisttab\tx720\lin720 }{\listname ;}\listid1645040802}}{\*\listoverridetable{\listoverride\listid1645040802\listoverridecount0\ls1}
{\listoverride\listid913707732\listoverridecount0\ls2}{\listoverride\listid1530872176\listoverridecount0\ls3}{\listoverride\listid1633056447\listoverridecount0\ls4}}{\*\rsidtbl \rsid8127215\rsid8782410}{\*\generator Microsoft Word 10.0.4524;}{\info
{\title NAME}{\author Gene Myers}{\operator Jason Miller}{\creatim\yr1998\mo12\dy2\hr14\min45}{\revtim\yr2004\mo2\dy9\hr16\min12}{\printim\yr1999\mo4\dy23\hr16\min21}{\version33}{\edmins932}{\nofpages8}{\nofwords4281}{\nofchars24407}
{\*\company Celera Genomics}{\nofcharsws28631}{\vern16475}}\margt1170 \widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\formshade\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3
\jcompress\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot\nolnhtadjtbl\rsidroot8782410 \fet0\sectd \linex0\endnhere\pgbrdropt32\sectdefaultcl\sftnbj {\header \pard\plain \s15\ql \li0\ri0\widctlpar\tqr\tx8640\faauto\adjustright\rin0\lin0\itap0 
\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid8127215 CONFIDENTIAL\tab Assembly Team Doc
\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}
{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \s18\ql \li0\ri0\sb120\widctlpar\tqr\tx8550\faauto\adjustright\rin0\lin0\itap0 
\b\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid8127215 CELAMY(1)\tab CELAMY(1)
\par NAME
\par }\pard\plain \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid8127215 celamy  }{\insrsid8127215 {\field{\*\fldinst SYMBOL 45 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}{
\insrsid8127215   Celera assembly layout viewer and analyzer.
\par }\pard\plain \s18\ql \li0\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin0\itap0 \b\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid8127215 SYNOPSIS
\par }\pard\plain \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid8127215 celamy   <specfile>  . . .
\par }\pard\plain \s18\ql \li0\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin0\itap0 \b\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid8127215 DESCRIPTION
\par }\pard\plain \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\i\insrsid8127215 Celamy }{\insrsid8127215 reads from one or more }{\i\insrsid8127215 specfiles}{\insrsid8127215 
 the specification of a layout of line segments and opens a window with a view of the entirety of the encoded layout.   }{\i\insrsid8127215 Celamy}{\insrsid8127215 
 is a work in progress.  Currently it can read spec files encoding all of the currently anticipate
d features as described below, but only displays line segments, marks, and link groups.  It further is only capable of zoom, pan, selective display of segments and marks, and canvas picks.
\par In the future, one will be able to ask for statistics and displays 
of a given facet of the layout communicated in the form of a query, a preliminary specification of which is given below.  Moreover, the features for clusters and overlap displays will all be added over time.
\par {\pntext\pard\plain\s17 \b\fs20 \hich\af0\dbch\af0\loch\f0 1.\tab}}\pard \s17\qj \fi-360\li720\ri0\sb120\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec\pnstart1\pnindent360\pnsp120\pnhang {\pntxta .}}
\faauto\ls1\adjustright\rin0\lin720\itap0 {\b\insrsid8127215 Specification File Syntax and Semantics:
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid8127215 A }{\i\insrsid8127215 celsim}{\insrsid8127215 
 input file consists of a sequence of lines where each line contains the definition of either a (a) category or style, (b) a category application loop, (c) a layout piece, (d) a link group, or (e) an overlap pair.  Formally,
\par }\pard\plain \s19\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs18\insrsid8127215 
\par }\pard \s19\ql \fi360\li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 {\fs18\insrsid8127215     }{\fs16\insrsid8127215 <spec.> <- ( <category> | <catloop> | <piece> | <link_group> | <overlap> )+}{\fs18\insrsid8127215 
\par }\pard\plain \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid8127215 
Both categories and pieces have a unique names assigned to them.  These names are alphanumeric strings that must }{\ul\insrsid8127215 start with a digit}{\insrsid8127215 .  One need not be concerned with reference-before-definition issues, 
as all references to such name are resolved after all input files have been read.  One should feel free to put items in any order convenient to the producer of the specification.  In the event that one submits several files to }{\i\insrsid8127215 celamy}{
\insrsid8127215  the result is the same as if the files had first been concatenated into a single larger file.
\par Every line except category application loops can end with an optional comment or label (see the syntax of each statement below).  Such a comment starts at the first occurrence of a #-s
ign and continues to the end of the line.  Leading and trailing white space is removed from the label and it is stored with the defined item and utilized in the display as described later when the behavior of the interface is detailed.
\par }{\ul\insrsid8127215 Category Definitions:}{\insrsid8127215  
\par A category definition consists of its name followed without any intervening white space by a colon.  Thereafter it consists of a sequence of graphic attributes specifying a color, thickness, or a drawing style of solid or dashed.  Spaces may occur betwe
en these items, but no spaces should occur within any given item.
\par }\pard\plain \s19\ql \fi360\li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs16\insrsid8127215       
\par     <category> <- <name>":" <attribute>+ ('#' <label>)!
\par     
\par         <attribute> <- "C[0-9A-Fa-f]*6" | "T"<positive int> | "D" | "S"
\par }\pard\plain \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid8127215 A color is specified by a 'C' followed by exactly 
6 hexadecimal digits.  Each pair of digits specifies an intensity level between 0 and 255 for the red, green, and blue components of the color, respectively.  For example, 'CFF0000' is full intensity red, 'C00FF00' is full intensity green, and 'CFF00FF' i
s
 full intensity purple.  A thickness is specified by a T followed by a positive integer.  For example, T3 specifies that objects in the given category be drawn with a 3-pixel thick brush.  Finally, specify a D if dashed line drawing is desired, and an S f
or solid lines.
\par There are three global registers that record the last specified color, thickness, and line style.  If in a category definition one of these items is not specified, then the last recorded value is taken.  For example, if one says '0: CFF0000 
T2 D' and the next category definition is '1: T3', then category 1 items will be red, dashed, and three-pixels thick.  The three attribute registers are initally set to white, one-pixel thick, and solid, respectively.
\par }{\ul\insrsid8127215 Category Application Loop:}{\insrsid8127215  
\par The full p
ower of a category application loop does not become apparent until we discuss layout piece definitions below, but we give the initial idea here.  Basically, we wish to realize an implicit method for categorizing a series of segments constituting a layout 
p
iece.  A category application loop is a list of references to defined category types.  A given category can occur on the list an arbitrrary number of times.  A category application is always in effect, initially it is a list consisting of the single defau
lt category, which is white, solid, and 1-pixel thick.  The current category application loop is reset whenever line with the following syntax is encountered:
\par }\pard\plain \s19\ql \fi360\li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs16\insrsid8127215       
\par     <catloop> <- "ATT:" <name> +
\par }\pard\plain \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid8127215 The category loop is set to the list of categories g
iven by the sequence of category names following the "ATT:" prefix.  This category loop becomes the current one and is applied to all subsequent items until the next category loop definition occurs.
\par }{\ul\insrsid8127215 Layout Piece Definitions:}{\insrsid8127215  
\par A piece definition consists of
 its name followed immediately by a colon, followed by a segment list, and terminated with an optional cluster designation and/or an optional row allocation constraint. A segment list consists of an increasing sequence of coordinates where one may intersp
e
rse a reference to a category between any two consecutive coordinates and one may optionally identify some of the interior coordinates as marks by placing an 'M' immediately in front of them (no intervening space please).  Each category reference consists
 of the letter 'A' immediately followed by the category's name.  All coordinates must be non-negative numbers.  Formally we have the grammar:
\par }\pard\plain \s19\ql \fi360\li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs16\insrsid8127215     
\par     <line> <- <name>":" <segmentlist> ("R"<#>)! ("C"<name>)! ('#' <label>)!
\par 
\par         <segmentlist> <- <coord> ( ("A"<name>)! "M"!<coord> )* ("A"<name>)! <coord>
\par }\pard\plain \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid8127215 Suppose a piece definition specifies the list x}{\sub\insrsid8127215 1}{\insrsid8127215 ,x}{
\sub\insrsid8127215 2}{\insrsid8127215 ,\'85x}{\sub\insrsid8127215 n}{\insrsid8127215  of coordinates where x}{\sub\insrsid8127215 i }{\insrsid8127215 {\field{\*\fldinst SYMBOL 163 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}{\insrsid8127215  x}{
\sub\insrsid8127215 i+1}{\insrsid8127215  and 0 }{\insrsid8127215 {\field{\*\fldinst SYMBOL 163 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}{\insrsid8127215  x}{\sub\insrsid8127215 1}{\insrsid8127215 .  Then }{\i\insrsid8127215 celamy}{\insrsid8127215 
 will allocate the interval [x}{\sub\insrsid8127215 1}{\insrsid8127215 ,x}{\sub\insrsid8127215 n}{\insrsid8127215 
] to a row of its display so that this interval does not overlap the interval of any other piece also allocated to that row.  The piece will be displayed as a series of segments [x1,x2],[x2,x3], \'85
 [xn-1,xn] where the category or style of each segment is de
termined either implicitly through the current category application loop, or explicitly through an attribute reference between the two delimiting coordinates.  For example, the definition "1: 100 A3 200 A1 300 A2 500" defines a piece covering the interval
 [100,500] where the segment [100,200] will be displayed in the style of category 3, the segment [200,300] in style 1, and the segment [300,500] in style 2.
\par The preceding example illustrates the explicit specification of categories for each segment.  Whenev
er an explicit category is not given between two consecutive coordinates for a segment, the category is fetched from the current category application loop as follows.  Suppose that the loop is set to a}{\sub\insrsid8127215 0}{\insrsid8127215 , a}{
\sub\insrsid8127215 1}{\insrsid8127215 , \'85 a}{\sub\insrsid8127215 k-1}{\insrsid8127215 .  Then the i}{\super\insrsid8127215 th}{\insrsid8127215  fetch gets category a}{\sub\insrsid8127215 (i-1)mod k}{\insrsid8127215 
.  That is, each category in the list is taken in turn and when the list is exhausted, one starts over at the beginning of the list, hence the use of the term "loop".  For example, if the most recent category application loop setting was "ATT:  2 1 3"
 then for the definition "3: 100 200 A0 300 400 500 A0 600 700", the category assignments to segments are: category 0 to [200,300] and [500,600], category 1 to [300,400], category 2 to [100,200] and [600,700], and category 3 to [400,500].  As an example m
o
re typical of a real application context, one might have the category application loop "ATT: 0 1" in force where 0 is a solid, 2-pixel thick, red line and 1 is a dashed, 1-pixel thick, green line.  Thereafter, definitions of the form "<id>: x1 x2 x3 x4" w
ill result in a piece that looks like two red "reads" (the intervals [x1,x2] and [x3,x4]) and a dashed "mate" connector between them (the interval [x2,x3]).
\par The final feature of layout pieces is that one may additionally specify any number of marks on the p
iece.  By simply placing an 'M' immediately in front of an interior coordinate (i.e. neither the first nor the last coord in the list), one is signifying that a tick mark should be drawn at that point in the line.  The category/style of the tick mark is g
i
ven by the explicity category immediately proceeding the coordinate, or the category that is implicitly placed there by the category application loop mechanism.  For example, the definition: "23Line: 100 A3 M200 300 400 A3 M500 600" draws a layout piece e
quivalent to "100 300 400 600" as drawn by the category application loop with tick marks in style 3 at coordinates 200 and 500.
\par At the end of a piece definition one may optionally place a row allocation constraint of the form 'R#' or designate the piece's m
embership in a cluster with a clause of the form 'C<name>'.  A row allocation constraint asserts that the given piece should be placed in the specified row of the display if at all possible.  The rows in the display are number from 0 on up to however many
 
are required, with row 0 at the top of the display and subsequent rows underneath it.  If a row allocation constraint cannot be met than it is placed on the next available row.  It is guaranteed that if two pieces overlap an both have row constraints, the
n
 the one with the lowered numbered row constraint will appear in a lower numbered row.  One example of the use would be to place a facsimile of an entire genome in row 0 of the display, where each repeat element type is shown in a unique category style.  
S
uch a genome is so long that one cannot describe it as a single piece, but one can describe it as a series of pieces all constrained to be in row 0.  Another example of the use of row constraints is to stratify the display.  One might want for example all
 
the pieces of a given category to appear in the uppermost rows and those of other pieces below them.  Constraining all the strata pieces to row 0 will have the desired effect (even if some of them overlap).  One can of course develop several strata by usi
ng constraints to the desired number of rows or strata.
\par Each piece can optionally belong to a cluster.  Each cluster is assumed to be given a unique name. Effectively, the cluster option permits one to }{\i\insrsid8127215 partition}{\insrsid8127215  the pieces into a set of disjoint clusters.  
The exact effect in terms of drawing is not fully delineable at this time, but the basic idea is that each cluster will be allocated in a set of contiguous rows so that the pieces will an identifiable grouping in the display.
\par }{\ul\insrsid8127215 Link Group Definitions:}{\insrsid8127215  
\par A link group is defined by following the keyword 'LNK:' with a list of the piece names to be put together in a group, optionally followed by a category type.}{\fs18\insrsid8127215 
\par }\pard\plain \s19\ql \fi360\li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs18\insrsid8127215 
\par }{\fs16\insrsid8127215 <link_group> <- "LNK:" <name>+ ("A"<name>)! ("#" <label>)!
\par }\pard\plain \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid8127215 Using a bus-bar display style, }{\i\insrsid8127215 celamy}{\insrsid8127215  will 
draw a busbar that contains drops to each member of the link group.  The bus-bar and drops are displayed in the style of the specified category (or the first style in the current category application loop if non is given.)}{\fs18\insrsid8127215 
\par }{\ul\insrsid8127215 Overlap Definitions:}{\insrsid8127215  
\par An overlap pair is defined by following the keyword 'OVLP:" with a pair of piece names, optionally followed by a category type.}{\fs18\insrsid8127215 
\par }\pard\plain \s19\ql \fi360\li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs18\insrsid8127215 
\par     }{\fs16\insrsid8127215 <overlap> <- "OLP:" <name> <name> ("A"<name>)! ("#" <label>)!
\par }\pard\plain \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid8127215 
The assumption is that the two intervals of the two pieces actually overlap.  If such is the case, then }{\i\insrsid8127215 celamy}{\insrsid8127215 
 will attempt to allocate the pieces in consecutive rows and fill the space between the overlapping parts with the color and style of the specified category type.
\par }{\ul\insrsid8127215 Object Display:}{\insrsid8127215  
\par Note that in total there are four types of displayable objects that can be defined in a celamy specification file:  segments (of pieces),  marks,  link groups, and overlaps.  }{\i\insrsid8127215 Celamy}{\insrsid8127215 
 creates a menu for each class of objects
 where each menu contains a list of the categories that have been applied to the particular object type.  One may selectively turn on and off the display of each type of object in each category by either releasing the menu over the selected item or clicki
ng the menu open and then clicking buttons on the menu on and/or off as desired.  The first word of the comment label of each category is displayed in the menu.
\par One can pick objects in the drawing area.  We describe the effect of each event type/object combination:
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb120\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls2\adjustright\rin0\lin720\itap0 {\ul\insrsid8127215 Left-Button-Down / Piece}{\insrsid8127215 
.  The boundary coordinates and length of the segment under (or nearly under) the cursor are displayed in the textbox.  When the button is released, the information disappears.  If the cursor is within 3 pixels of a mark
, then the position of the mark is displayed.  This takes precedence over displaying segment coordinates.
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb120\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls2\adjustright\rin0\lin720\itap0 {\ul\insrsid8127215 Shift-Left-Button-Down / Piece}{\insrsid8127215 :  Same as above except marks are ignored.
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb120\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls2\adjustright\rin0\lin720\itap0 {\ul\insrsid8127215 Control-Left-Button-Down / Piece}{\insrsid8127215 : The coordinates and length of the selected piece are displayed.
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb120\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls2\adjustright\rin0\lin720\itap0 {\ul\insrsid8127215 Right-Button-Down / Piece}{\insrsid8127215 :  The comment/label for the piece is displayed.
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb120\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls2\adjustright\rin0\lin720\itap0 {\ul\insrsid8127215 Left-Button-Down / Link-Bus-Bar}{\insrsid8127215 :  All pieces of the link group are hilited in the text color and the number of pieces and span of these pieces is displayed in the text area.

\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb120\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls2\adjustright\rin0\lin720\itap0 {\ul\insrsid8127215 Right-Button-Down / Link-Bus-Bar}{\insrsid8127215 :  The comment/label for the link group is displayed.
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\brdrl\brdrs\brdrw45\brsp80\brdrcf3 \faauto\adjustright\rin0\lin360\itap0 {\insrsid8127215 One can zoom in on a particular portion of a display by dragging the mous over a segment of the horizon
tal axis.  A drag consists of a button press, possible movement of the mouse, and a release.  The axis coordinates at which the press and release occurred are captured and celamy zooms that segment of the axis to fill the entire horizontal axis.  The drag
 must begin at or below the horizontal line of the axis drawing.  If one simply clicks with no intervening mouse movement, then celamy zooms in by a factor of 2 centered on the coordinate where the click occurs.}{\b\insrsid8127215 
\par {\pntext\pard\plain\s17 \b\fs20 \hich\af0\dbch\af0\loch\f0 2.\tab}}\pard \s17\qj \fi-360\li720\ri0\sb120\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec\pnstart1\pnindent360\pnsp120\pnhang {\pntxta .}}
\faauto\ls1\adjustright\rin0\lin720\itap0 {\b\insrsid8127215 Celamy Queries:
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid8127215 In the text area at the b
ottom of the celamy window, one can enter a query to gather statistical information about a layout.  To activate the text area, move the cursor into the text area.  One can type an edit a query with the customary wysiwyg mechanics.  The syntax of a query 
is as follows:
\par }\pard\plain \s19\ql \li360\ri0\widctlpar\faauto\adjustright\rin0\lin360\itap0 \f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs16\insrsid8127215 
\par     <query> <- <query> "[|&-]" <query>
\par              }{\fs16\highlight7\insrsid8127215 | <query> "?[ixc]" <query>}{\fs16\insrsid8127215 
\par              }{\fs16\highlight7\insrsid8127215 |  <query> "[+-><]" <int\u8805\'3d0>}{\fs16\insrsid8127215 
\par              | "!" <query>
\par              | <query> "_" <int\u8805\'3d1>
\par              | "(" <query> ")"
\par              | <name>
\par              }{\fs16\highlight4\insrsid8127215 | $<name>}{\fs16\insrsid8127215 
\par              }{\fs16\highlight7\insrsid8127215 | "@" <obj_qry>}{\fs16\insrsid8127215 
\par 
\par   }{\fs16\highlight7\insrsid8127215 <obj_qry> <- <objb_qry> "[|&-]" <obj_qry>}{\fs16\insrsid8127215 
\par              }{\fs16\highlight7\insrsid8127215 | <obj_qry> "?[ixc]" <query>}{\fs16\insrsid8127215 
\par              }{\fs16\highlight7\insrsid8127215 | "#" <obj_qry>}{\fs16\insrsid8127215 
\par              }{\fs16\highlight7\insrsid8127215 | <obj_qry> "~[cn]?i?" "\\""<regular_expr>"\\""}{\fs16\insrsid8127215 
\par              }{\fs16\highlight7\insrsid8127215 | <obj_qry> "[><]" <int\u8805\'3d0>}{\fs16\insrsid8127215 
\par              }{\fs16\highlight7\insrsid8127215 | "!" <obj_qry>
\par }{\fs16\insrsid8127215              }{\fs16\highlight7\insrsid8127215 | "(" <obj_qry> ")"}{\fs16\insrsid8127215 
\par              }{\fs16\highlight4\insrsid8127215 | $<name>}{\fs16\insrsid8127215 
\par              }{\fs16\highlight7\insrsid8127215 | <name>}{\fs16\insrsid8127215 
\par 
\par }\pard\plain \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid8127215 The atoms of a query are names or words chosen from those in the segment, mark, and link menus, }
{\highlight4\insrsid8127215 or the names given to saved queries preceded by a dollar-sign (see \'93Query Manager\'94 below).}{\insrsid8127215   In parsing a query the precedence order is }{\highlight7\insrsid8127215 
_, <, >, +, or ~,then @ or !, then ?i, ?x,or ?c, then &, then -, and finally |.  When precedence is tied, grouping is left to right.  }{\i\highlight7\insrsid8127215 Use parenthesis when in doubt !}{\i\insrsid8127215 
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\brdrl\brdrs\brdrw45\brsp80\brdrcf7 \faauto\adjustright\rin0\lin360\itap0 {\ul\insrsid8127215 Object Queries:
\par }{\insrsid8127215 There are two distinct facets of a layout over which one can query: }{\ul\insrsid8127215 objects}{\insrsid8127215  and }{\ul\insrsid8127215 coverage plots}{\insrsid8127215 
.  Any query or portion of a query to which the @ operator is applied is an object query.  The result
 of such a query is the set of line segments and/or link items satisfying the query.  For example, @ ( Red | Green > 500), returns the set of all objects that are either (1) Red or  (2) Green and over 500 units long.  Note carefully that the universe of a
ll objects is links and line segments, so saying @ ! Red for example, where Red is say a line segment type, returns }{\i\insrsid8127215 all links}{\insrsid8127215 
 and all line segments that are not Red.  The logical operators and (&), or (|), minus (-), and not (!) have their usual interpretat
ions.  The operators greater than int (> <int>) and less than int (< <int>) select those objects on the l.h.s. that are strictly greater or less than the given length, respectively.  The matches operator (~) selects all those objects whose line name (if a
 line segment) or label matches the regular expression on the right hand side.  The letters \'93c\'94, \'93n\'94, and \'93i\'94 immediately after the ~ qualify the matches as follows:  \'93c\'94 \endash  try matching only the label, \'93n\'94 \endash 
 try matching only the line name, and \'93i\'94 \endash  case does not matter.  Without either the \'93c\'94 or \'93n\'94
 qualifier, celamy tries matching both the line name and label. See the description of regular expressions given later in this section. The prefix \'93#\'94 operator produces the set of line segments that are linked 
by a link item in its operand.  Finally, the \'93?i\'94, \'93?x\'94, and \'93?c\'94 operators select those objects from the set on the left, that are contained in, intersect with, or contain, respectively, an interval of the coverage plot on the right.

\par }{\ul\insrsid8127215 
\par Coverage Queries:
\par }{\insrsid8127215 Any query operators not within an @ subexpression operate on a coverage plot.  A coverage plot is a rectilinear plot whose axis is the same as that of the layout celamy is displaying.  At each coordinate the coverage plot has an integer 
}{\ul\insrsid8127215 coverage depth}{\insrsid8127215 .  An }{\ul\insrsid8127215 interval}{\insrsid8127215  of a coverage plot is a maximal contiguous segment for which the coverage depth is non-zero.  An }{\ul\insrsid8127215 interval of depth d}{
\insrsid8127215  of a coverage plot is a maximal contiguous segment for which the coverage depth is d or more.  For a set of line segment and link 
objects, the coverage depth at each coordinate is equal to the number of objects spanning that point.  A line segment spans the coordinates from its start point to its finish point, inclusively, and a link object spans the coordinates from the start point
 
of its leftmost line to the finish point of its rightmost line, inclusively.  So in this case, a coverage plot corresponds to exactly what one would expect for an assembly of line segments.  An object expression is converted to a coverage plot whenever th
e next operator to be applied to it is not part of the object expression.
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid8127215 Logical combinations of coverage plots permit one to inquire about the intervals of the layout that satisfy the boolean query.  For example '}{
\f2\fs18\insrsid8127215 Yellow \endash  (Red | Green)}{\insrsid8127215 ' would be an inquir
y about the intervals of the layout that are covered by yellow but not red or green segments.  Moreover, the operators also combine the coverage depths in a meaningful way.  Let c(a,x) be the coverage depth of subexpression a at some point x on the axis. 
 Then inductively:
\par {\pntext\pard\plain\s17 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb120\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls3\adjustright\rin0\lin720\itap0 {\f2\fs18\insrsid8127215 c(a&b,x) = min(c(a,x),c(b,x))
\par {\pntext\pard\plain\s17 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls3\adjustright\rin0\lin720\itap0 {\f2\fs18\insrsid8127215 c(a|b,x) = max(c(a,x),c(b,x))
\par {\pntext\pard\plain\s17 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls3\adjustright\rin0\lin720\itap0 {\f2\fs18\insrsid8127215 c(!a,x)  = if c(a,x)>0 then 0 else 1
\par {\pntext\pard\plain\s17 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls3\adjustright\rin0\lin720\itap0 {\f2\fs18\insrsid8127215 c(a-b,x) = c(a&!b,x)
\par {\pntext\pard\plain\s17 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls3\adjustright\rin0\lin720\itap0 {\f2\fs18\insrsid8127215 c(a_i,x) = floor(c(a)/i,x)
\par {\pntext\pard\plain\s17 \f3\fs18\highlight7 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls3\adjustright\rin0\lin720\itap0 {\f2\fs18\highlight7\insrsid8127215 c(a+i,x) = max(c(a,y):y }{\f2\fs18\highlight7\insrsid8127215 {\field{\*\fldinst SYMBOL 206 \\f "Symbol" \\s 9}{\fldrslt\f3\fs18}}}{\f2\fs18\highlight7\insrsid8127215  [x-i,x+i])

\par {\pntext\pard\plain\s17 \f3\fs18\highlight7 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls3\adjustright\rin0\lin720\itap0 {\f2\fs18\highlight7\insrsid8127215 c(a-i,x) = min(c(a,y):y }{\f2\fs18\highlight7\insrsid8127215 {\field{\*\fldinst SYMBOL 206 \\f "Symbol" \\s 9}{\fldrslt\f3\fs18}}}{\f2\fs18\highlight7\insrsid8127215  [x-i,x+i])

\par {\pntext\pard\plain\s17 \f3\fs18\highlight7 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls3\adjustright\rin0\lin720\itap0 {\f2\fs18\highlight7\insrsid8127215 c(a>i,x) = max( d : }{\f2\fs18\highlight7\insrsid8127215 {\field{\*\fldinst SYMBOL 36 \\f "Symbol" \\s 9}{\fldrslt\f3\fs18}}}{\f2\fs18\highlight7\insrsid8127215 y ( x }{
\f2\fs18\highlight7\insrsid8127215 {\field{\*\fldinst SYMBOL 206 \\f "Symbol" \\s 9}{\fldrslt\f3\fs18}}}{\f2\fs18\highlight7\insrsid8127215  [y,y+i] and }{\f2\fs18\highlight7\insrsid8127215 {\field{\*\fldinst SYMBOL 34 \\f "Symbol" \\s 9}{\fldrslt
\f3\fs18}}}{\f2\fs18\highlight7\insrsid8127215 z }{\f2\fs18\highlight7\insrsid8127215 {\field{\*\fldinst SYMBOL 206 \\f "Symbol" \\s 9}{\fldrslt\f3\fs18}}}{\f2\fs18\highlight7\insrsid8127215  [y,y+i], c(a,z) }{\f2\fs18\highlight7\insrsid8127215 
{\field{\*\fldinst SYMBOL 179 \\f "Symbol" \\s 9}{\fldrslt\f3\fs18}}}{\f2\fs18\highlight7\insrsid8127215  d))
\par {\pntext\pard\plain\s17 \f3\fs18\highlight7 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls3\adjustright\rin0\lin720\itap0 {\f2\fs18\highlight7\insrsid8127215 c(a<i,x) = if \'93length of interval containing x\'94 < i then c(a) else 0
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\brdrl\brdrs\brdrw45\brsp80\brdrcf7 \faauto\adjustright\rin0\lin360\itap0 {\insrsid8127215 Intuitively, the query '}{\f2\fs18\insrsid8127215 a_i}{\insrsid8127215 
' effectively is asking for regions where the coverage is }{\f2\fs18\insrsid8127215 i}{\insrsid8127215  or more.  The \'93+\'94 and \'93\endash \'94 operators c
an be thought of having the effect of expanding or contracting every interval of each depth of the coverage plot by the given amount.  If in the case of \'93\endash \'94
 an interval  at some depth becomes negative, then it disappears.  The > and < operators keep only t
hose intervals that are greater or smaller than a given length.  There is assymetry in these two definitions as it makes no sense to, for example, keep a very small interval at depth 5 if the interval (at depth 1) that it rests on top of is too big.  So f
or this operator, we chose to keep the coverage profile of an interval of positive coverage if the length of the interval is less than the given threshold.  We suggest you try a few examples and observe the coverage plots that result.
\par Finally, the \'93?i\'94, \'93?x\'94, and \'93?c\'94
 operators on coverage plots select the intervals at each depth of the plot on the l.h.s. that are contained in, intersect with, or contain, respectively, an interval (of depth 1) of the plot on the r.h.s.  As for the \'93>\'94 and \'93<\'94
 operators, the definition of \'93in\'94 must be assymetric for the same reasons.  Thus an interval at some depth is retained only if its parent interval at depth 1 is contained in an interval of the plot on the r.h.s.
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\brdrl\brdrs\brdrw45\brsp80\brdrcf3 \faauto\adjustright\rin0\lin360\itap0 {\ul\insrsid8127215 Regular Expressions:
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid8127215 
Celamy regular expression are exactly the same as those recognized by egrep plus an extension designed to facilitate matching numeric ranges.  The basic egrep matches the following patterns, where in the term 'character' excludes the new-line symbol:

\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb120\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls4\adjustright\rin0\lin720\itap0 {\insrsid8127215 A \\ followed by a single character other than newline matches that character.
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb120\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls4\adjustright\rin0\lin720\itap0 {\insrsid8127215 The character ^ matches the beginning of a string (i.e., name or comment).
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb120\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls4\adjustright\rin0\lin720\itap0 {\insrsid8127215 The character $ matches the end of a line (atom name/comment).
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb120\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls4\adjustright\rin0\lin720\itap0 {\insrsid8127215 A . (period) matches any character.
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb120\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls4\adjustright\rin0\lin720\itap0 {\insrsid8127215 A single character not otherwise endowed with special meaning matches that character.
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb120\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls4\adjustright\rin0\lin720\itap0 {\insrsid8127215 A string enclosed in brackets [] matches any single character from the string.  Ranges of ASCII character codes may be abbreviated as in 'a-z0-9'.  A ] may occur
 only as the first character of the string.  A literal \endash  must be placed where it can't be mistakend for a range indicator.
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb120\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls4\adjustright\rin0\lin720\itap0 {\insrsid8127215 A regular expression followed by an * (asterisk) matches a sequence of 0 or more matches of the regular expression.  A regular exp
ression followed by a + (plus) matches a sequence of 1 or more matches of the regular expression.  A regular expression followed by a ? (question mark) matches a sequence of 0 or 1 matches of the regular expression.
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb120\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls4\adjustright\rin0\lin720\itap0 {\insrsid8127215 Two regular expressions concatenated match a match of the first followed by a match of the second.
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb120\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls4\adjustright\rin0\lin720\itap0 {\insrsid8127215 Two regular expressions separated by a | match either a match to the first or a match to the second.
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb120\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls4\adjustright\rin0\lin720\itap0 {\insrsid8127215 A regular expression enclosed in parentheses matches a match for the regular expression.
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid8127215 The order of precedence of operators at the same parenthesis level is [], then *, +, or ?, then concatenation, and finally |.
\par Celamy regular expressions have three additional features.  First, the symbol '#' is a short hand for the regular expression "0|
[1-9][0-9]*", i.e., that matches any positive integer constant.  For example the pattern "CA#" matches "CA1", "CA13", and "CA203" but not "CA033".  To match the latter use the pattern "CA0*#".  Second, the symbol '@' is a short hand for "[_A-Za-z][_A-Za-z
0
-9]*", i.e., any C-identifier.  Probably not too useful in the context of Celamy, but comes with the # symbol by way of another application domain for which Celamy regular expression package was designed.  Finaly, and of most importance, is support for a 
"number class", denoted "}{\fs16\insrsid8127215 '\{' \{integer_1\} . \{integer_2\} '\}'}{\insrsid8127215 
".  The first integer must not be greater than the second.  The number classes matches any sequence of digits denoting a number in the range of the class.  For example "\{3-56\}" matches "3", "4", ... 
"9", "10", "11",  ... and "56".  The integers may be padded on the left with zeros in which case the padding is considered to be part of the matching string.  For example, "\{003-056\}" matches "003", "004", ... "009", "010", "011", ... and "056".
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\brdrl\brdrs\brdrw45\brsp80\brdrcf7 \faauto\adjustright\rin0\lin360\itap0 {\ul\insrsid8127215 Action of Queries:
\par }{\insrsid8127215 To activate the query and see the results, press the 'Query' button to the left of the text area.  A valid object query results in }{\highlight3\insrsid8127215 
(1) the production of a window display a histogram of the lengths of all the objects satisfying the query, (2) the p
roduction of a window displaying a coverage plot of all the objects satisfying the query, and (3) every selected item is recolored the default hilite color, white.  A valid coverage query results in (1) a histogram of the lengths of all the intervals in t
he coverage plot, and (2) the coverage depth along the layout for the given query.}{\insrsid8127215 
  Currently the histogram result is fully functional and the coverage window is complete save that there is still no way to control the scale of the vertical axes.   The cover
age window is sized in the horizontal dimension to exactly match the canvas of the main window and any scrolling or zooming in the main canvas will be immediately reflected in the coverage window.  One may have histogram and coverage windows from several 
queries open simultaneously.  A given result window only disappears when it is explicitly closed.
\par }{\ul\insrsid8127215 A couple of tricks}{\insrsid8127215 :  If you desire a coverage histogram and plot of an object query XXX, simply saying, XXX _ 1 will force the query to be considered a coverag
e query without alterring the result.  If you want a coverage plot that just shows the intervals of non-zero depth, then apply negate (!) twice.
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\i\ul\highlight7\insrsid8127215 Status:}{\i\ul\insrsid8127215  }{\insrsid8127215 Queries now function over both line and link items, but still not marks. 
\par }{\b\insrsid8127215 Celamy Tools:
\par }{\insrsid8127215 The "Tools" menu of the celamy main window has options to allow a user to (a) set the dimensions of the canvas in pixels from the key board, (b) set the portion of the layout in view from the key board, and }{\highlight3\insrsid8127215 
(c) save, reuse, and control queries.}{\insrsid8127215 
\par }{\ul\insrsid8127215 View Range Setting:
\par }{\insrsid8127215 Selecting the "View\'85
" option brings up a window with two text boxes in which one can type the range of coordinates one would like to see in the canvas.  Tabbing moves the cursor from one box to the other and hitting a carriage return is equivalent to pressing th
e "Set" button, so one's hands never need leave the keyboard.  The desired range is displayed in the viewer with a little bit of padding on each side so the selected endpoints are interior to the view.  Whenever one changes the view on the main window, th
e numbers in the text windows change to reflect the mouse-selected range.
\par }{\ul\insrsid8127215 Canvas Sizing:
\par }{\insrsid8127215 The "Canvas\'85" option brings up a window very much like that for "View\'85" with the same ergonomic behavior.  In this case the two numbers set the width and height of the 
canvase area in pixels.  This is useful if one wishes to do screen capture and wants a consistent window size.
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\brdrl\brdrs\brdrw45\brsp80\brdrcf3 \faauto\adjustright\rin0\lin360\itap0 {\ul\insrsid8127215 Query Manager:
\par }{\insrsid8127215 The "Query\'85" option brings up the query manager window wherein one can save and re-execute queries after optionally setting button
s that control their action.  Initially the window is empty save with a frame of control buttons at the top and a row of column labels for the entries that will be added, one per row.
\par To add a query to the manager window, type the query in the query text box on the main display window.  Then press the \'93Add\'94
 button in the query manager.  A row of widgets and text will be appended to the list of queries being saved.  From left to right, t
here is (a) a radio button which is set when the given query is the one to which a manager control button is to apply, (b) a colored button showing the hilite color that will be used for object hiliting (initially white and changeable by clicking the butt
on), (c) three small option buttons controlling whether a histogram (\'93H?\'94), coverage plot \'93P?\'94, or show hiliting (\'93S?\'94
) will be produced when this query is re-executed, (d) a textbox wherein the query can be given a name, and (e) the text of the query (uneditable).
\par To delete a query from the manager\rquote s list, simply select the query by pressing on its radio button at the far left and then press the \'93Delete\'94 control button.  To re-execute a query, select its radio buttion and then press \'93Query\'94
.  Histogram and 
Coverage Plot windows will appear according to the display option settings, and the objects of an object query will be hilited in the selected color if the Show option is selected.  Hiliting induced by a given query on the main display window can be turne
d off by pressing the \'93Clear\'94 button while the query is selected.
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\brdrl\brdrs\brdrw45\brsp80\brdrcf4 \faauto\adjustright\rin0\lin360\itap0 {\insrsid8127215 
The name given to a query in the manager window can be referred to in a subsequent query by placing a $-sign before the name in the new query.  One should be cautioned that the query manager 
saves a data structure representing the result of a query when it is added, and doesn not re-execute a query when the \'93Query\'94 button is clicked.  Thus query names may be changed without affecting the correctness of any previously saved query.
\par Pressing the \'93Save\'94 button, causes celamy to save the current query manager contents to the file \'93.celquery\'94
 at the users home directory.  Whenever celamy is invoked it automatically loads the contents of the query manager from this file, if it can find it.  The one pi
tfall in the current implementation is that celamy re-executes the queries at the time of this load in order to recreate the results of the queries.  Thus if one of these queries A refers to a query B whose name was changed after A was saved to the manage
r, then an error will result.  The correction is for celamy to read and write the results of the query and this may be corrected in future version.
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid8127215 
\par }\pard\plain \s18\ql \li0\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin0\itap0 \b\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid8127215 AUTHORS
\par }\pard\plain \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid8127215 {\*\bkmkstart _Hlt435346562}Gene Myers: }{\f36\insrsid8127215 
\par {\*\bkmkend _Hlt435346562}Created April 22, \lquote 99
\par Updated May 7, '99  (added description of comments/labels)
\par Updated May 16, '99  (replaced int ID's with names and enhanced pick)
\par Updated May 27, '99  (added first level of query capability)
\par Updated June 20, '99 (added view & canvas set & segment search)
\par Updated August 3, '99 (added patch to query mechanism, links and @)
\par Updated January 1, '00 }{\f36\highlight7\insrsid8127215 (expanded @ to object queries and added to}{\f36\insrsid8127215 
\par }\pard \s17\qj \li360\ri0\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\f36\insrsid8127215                         }{\f36\highlight7\insrsid8127215 operator repetoire)}{\f36\insrsid8127215 
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\f36\insrsid8127215 Updated January 16, '00 }{\f36\highlight3\insrsid8127215 (Added query manager)}{\f36\insrsid8127215 
\par Updated January 23, '00 }{\f36\highlight4\insrsid8127215 (query names are operational and query}{\f36\insrsid8127215 
\par }\pard \s17\qj \li360\ri0\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\f36\insrsid8127215                          }{\f36\highlight4\insrsid8127215 contents can be saved between sessions}{\f36\highlight7\insrsid8127215 )}{\f36\insrsid8127215 
\par 
\par }}