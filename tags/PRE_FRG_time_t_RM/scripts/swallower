#!/usr/local/bin/bash
#
###########################################################################
#
# This file is part of Celera Assembler, a software program that 
# assembles whole-genome shotgun reads into contigs and scaffolds.
# Copyright (C) 1999-2004, Applera Corporation. All rights reserved.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received (LICENSE.txt) a copy of the GNU General Public 
# License along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
###########################################################################
#
#
# Usage: $ swallower [-c] arg1 arg2 arg3 arg4

# arg1 : The first argument is the project name.

# arg2 : The IID of the last successfully processed batch file by this
# script.  Use zero to start the pipeline.

# arg3 : A dirctory containing the new files.

# arg4 : A directory containing the old files.

# This script is invoked from the directory where the tool is to
# be executed and consequently the directory where all the
# miscellaneous files are created.

# Remember not to edit this script during execution.

# Command line options:

# c : Create the first store. The last batch IID must be 0.

#######################################################################

# Remember not to edit this script during execution.

# A problem with this script that the sequence numbers encoded in the
# store names and the batch IIDs of the .inp files can become unequal.

#######################################################################

TIMER="/usr/bin/time"
# AS_BIN="${AS_ROOT}/bin"
# This assumes that the executable is coming directly from the release
# area.  It also assumes that the executable can not be re-built
# during a run.

CREATE_MODE=0

rc=0
trap "rm -f $s $t; exit \$rc" 0
case $? in 0);; *) rc=$?; exit;; esac
set -- `getopt cAPQ "$@"`

while
	test X"$1" != X--
do
	case "$1"
	in
	-c)	CREATE_MODE=1
		shift 1;;
	-P)	OUTPUT_MODE="-P"
		shift 1;;
	-Q)	CELSIM_MODE="-Q"
		shift 1;;
        -A)     ANALYSIS_MODE="-A 1"
		shift 1;;
	*)
		echo "invalid parameter $1" 1>&2
                exit
		shift
		;;
	esac
done
shift

#
# The command options are now parsed.
#
##########################################################

Sprefix=${1}
oldiid=${2}
inbox=${3}
outbox=${4}

##########################################################

store_extension=batchlist
in_pipe_extension=cai
out_pipe_extension=frg

##########################################################

echo "* The project name is <${Sprefix}>."
echo "* The external input files are in <${inbox}>."
echo "* The external output files are in <${outbox}>."
echo "* The last batch IID is <${oldiid}>."

if [ ! -d ${inbox} ] ; then
  echo "The inbox is not available" ; exit 1
fi
if [ ! -d ${outbox} ] ; then
  echo "The outbox is not available" ; exit 1
fi

oldiid_formatted=$(printf "%05d" ${oldiid})
oldStore=${Sprefix}_${oldiid_formatted}.${store_extension}
echo "${oldStore} is the old store directory."

inlist=${inbox}/INT_*_HUMAN_FRAGS.${in_pipe_extension}

for Bfile in ${inlist} ; do

  newfile=${Bfile##*/}
  echo "The input batch file is <${newfile}>."

  newiid=$((oldiid + 1))
  oldiid_formatted=$(printf "%05d" ${oldiid})
  newiid_formatted=$(printf "%05d" ${newiid})
  newStore=${Sprefix}_${newiid_formatted}.${store_extension}
  echo oldiid is ${oldiid}.
  echo newiid is ${newiid}.
  echo oldStore is ${oldStore}.
  echo newStore is ${newStore}.

  if [ ${oldiid} -eq 0 ] ; then
    if [ ${CREATE_MODE} -eq 1 ]; then
      echo "Create an empty store"
      rm -f ${oldStore}
      cat <<EOF > ${oldStore}
EOF
    else
      echo "The -c option is required to create a new store." ; exit 1
    fi
#  else
#    stores="-i ${oldStore} -o ${newStore}"
  fi
#  echo "The stores variable is " ${stores}
  
  if !( [ ${CREATE_MODE} -eq 1 ] || [ -e ${oldStore} ] )
  then
    echo "The old store is not available." ; exit 1
  fi

  if $(grep -q ${newfile} ${oldStore}) ; then
  echo ${Bfile} already processed.
  else
  echo ${Bfile} to be processed.

  
#  if [ -e ${outbox}/${oldStore} ]
#  then
#    echo "The old store <${oldStore}> is already in the outbox.  Why?"
#    exit 1
#  fi

#  if [ -e ${outbox}/${newStore} ]
#  then
#    echo "The new store <${newStore}> is already in the outbox.  Why?"
#    exit 1
#  fi

  if [ -e ${newStore} ]
  then
    echo "The new store <${newStore}> is already in the workbox.  Why?"
    exit 1
  fi

#  oldiid_formatted=$(printf "%05d" ${oldiid})
#  infile=${Sprefix}_${oldiid_formatted}.${in_pipe_extension}
#  if [ -e ${outbox}/${infile} ]
#  then
#    echo "The input pipeline file <${infile}> is already in the outbox. Why?"
#    exit 1
#  fi

  outfile=${Sprefix}_${newiid_formatted}.${out_pipe_extension}
  if [ -e ${outfile} ]
  then
    echo "The output pipeline file <${outfile}> is already in the workbox. Why?"
    exit 1
  fi
  if [ -e ${outbox}/${outfile} ]
  then
    echo "The output pipeline file <${outfile}> is already in the outbox. Why?"
    exit 1
  fi

  if 
    cp ${oldStore} ${newStore}_tmp
    cat <<EOF >> ${newStore}_tmp
${newiid_formatted} ${newfile}
EOF
    chmod ug+rw ${newStore}_tmp
    if cp ${Bfile} ${outfile}_tmp ; then 
      chmod ug+rw ${outfile}_tmp
      mv ${outfile}_tmp ${outfile}
    else
      rm -f ${outfile}_tmp
      echo "cp failed"
      exit 1
    fi
    
  then
    echo "transformation successful"

    echo "Put old store and batch file into outbox..."
#    chmod a-w ${oldStore}
#    chmod a-w ${Bfile}
    if [ -e ${oldStore} ] ; then 
      if mv ${oldStore} ${outbox} ; then
        echo The old store was moved to ${outbox}
      else
        echo The move of ${oldStore} to ${outbox} failed. ; exit 1
      fi
    else
      echo ${oldStore} did not exist and was not moved to ${outbox}.
    fi

    mv ${newStore}_tmp ${newStore}

#    if mv ${Bfile} ${outbox} ; then
#       echo "The processed pipeline file was moved to ${outbox}."
#    else
#       echo "The move of the pipeline file to ${outbox} failed."
#       exit 1
#    fi

    echo "Set up for the next iteration ..."
    oldiid=${newiid}
    oldStore=${newStore}
    newiid=$((oldiid + 1))
    newiid_formatted=$(printf "%05d" ${newiid})
#    Bfile=${Sprefix}_${newiid_formatted}.${in_pipe_extension}
  else
    echo "fatal error in tool"
    echo " Check ${Sprefix}_${oldiid_formatted}.err file."
    exit 1
  fi

  fi
done
exit 0






