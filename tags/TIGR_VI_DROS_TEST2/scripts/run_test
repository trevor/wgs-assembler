#!/usr/local/bin/bash
#
###########################################################################
#
# This file is part of Celera Assembler, a software program that 
# assembles whole-genome shotgun reads into contigs and scaffolds.
# Copyright (C) 1999-2004, Applera Corporation. All rights reserved.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received (LICENSE.txt) a copy of the GNU General Public 
# License along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
###########################################################################
#
#
# Usage: $ chmod a+x $AS_ROOT/scripts/run_test
#        $ bsub -K < $AS_ROOT/scripts/run_test
#
# Purpose: Perform periodic test runs.
#
# The source code that is tagged as "under test" for this phase of testing
# is compiled and run on the genome list specified.
#
# Envirnomental variables: RUN_TAG, GENOME_LIST, and AS_RELEASE_PATH
# must be set before starting this script.
# 
##########################################################################
#
# The following are the independent environmental variables.
# You may have to change these settings.
#
# Did you set your environmental variable LSB_HOSTS?  
# If not, use the next lines.
# 
#
THETIME=`date +"%Y%m%d%H%M"`
#THETIME=`date +"%j"`
#
CHECK_IN1=AS_PRIV_ASSEMBLER_UNDER_${RUN_TAG}_TEST
CHECK_IN2=AS_PRIV_ASSEMBLER_RAN_${RUN_TAG}_TEST
CHECK_IN3=AS_PRIV_ASSEMBLER_RAN_${RUN_TAG}_TEST_$THETIME
#
#
# #BSUB -J run_daily.try     # the default job name
#BSUB -P AssemblyTest      # the default project name
#BSUB -R "select[mem>2000]" # overlap, unitigger, and cgw use more than 2 GB also!!
# #BSUB -R "select[mem>4000 && swap>5000]" # overlap, unitigger, and cgw use more than 2 GB also!!
#BSUB -C 0                  # the default core limit
#BSUB -q assembly
# the default candidate hosts that have /work/assembly
# and /data/assembly2 mounted.
# #BSUB -R "select[mem>3000 && swap>5000] rusage[mem=3000:duration=30]"
# the default resource requirements
# #BSUB -n 4                 # run with 4 processors
# #BSUB -G assembly
# #BSUB -o /work/assembly/asteam/periodic_run/lsf_output
#           the default stdout and stderr
#
###############################################################
###############################################################
###############################################################
# These are the dependent environmental variables.  Please do not
# change these unless you study the entire process.
#
#
CVSROOT=/cm/cvs
export CVSROOT
export CVSREAD
export CVSUMASK=002
umask 002
#
#
echo "Test for disk access to the source and data directories."
#
if mkdir -p $AS_RELEASE_PATH ; then
  echo "Can use $AS_RELEASE_PATH on $HOSTNAME."
else 
mail $USER,asteam <<EOF 
Subject: $RUN_TAG job failed.
Could not use $AS_RELEASE_PATH on $HOSTNAME.
EOF
  echo "Could not use $AS_RELEASE_PATH on $HOSTNAME." ; exit 1
fi
#
if mkdir -p $AS_DATA_PATH ; then
  echo "Can use $AS_DATA_PATH on $HOSTNAME."
else 
mail $USER,asteam <<EOF 
Subject: $RUN_TAG job failed.
Could not use $AS_DATA_PATH on $HOSTNAME.
EOF
  echo "Could not use $AS_DATA_PATH on $HOSTNAME." ; exit 1
fi
#
echo "Esablished disk access to the source and data directories."
#
###############################################################
#
#if shlock -p $$ -f $AS_RELEASE_PATH/$RUN_TAG.lock ; then 
#  echo "This is a periodic run at " $THETIME 
#else
#  echo "A $RUN_TAG job is already running." ; exit 1
#fi
mkdir -p $AS_RELEASE_PATH
if [ -e $AS_RELEASE_PATH/$RUN_TAG.lock ] ; then 
mail $USER,asteam <<EOF 
Subject: Assembler $RUN_TAG job is already running.
An Assembler $RUN_TAG job is already running.
EOF
  echo "$AS_RELEASE_PATH/$RUN_TAG.lock already exists!"
  echo "A $RUN_TAG job might already be running." ; exit 1
else
  cat <<EOF > $AS_RELEASE_PATH/$RUN_TAG.lock
A lock file.
EOF
  echo "A $RUN_TAG job started at `date`."
fi
#
date
pwd
#
# Force a build to occur.
#
SEP_PATH=$AS_RELEASE_PATH/cds/SEP ; export SEP_PATH
AS_ROOT=$AS_RELEASE_PATH/cds/AS ; export AS_ROOT
#
echo `env`
#
# In case the job fails, this CVS tag makes it reproducible.
( cd $AS_RELEASE_PATH/cds ; cvs update -r $CHECK_IN1 )
#
# Unfortunately, the CGW needs /usr/lib/libdxml.a to build.
# That library is not available on all of the LSF compute farm.
# So we spawn a job back to assembly2.
#bsub -K -q assembly -J DailyMake <<EOF 
( cd $AS_RELEASE_PATH/cds/SYS/UID/src ; gmake all )
( cd $AS_RELEASE_PATH/cds/AS/src ; gmake all )
#EOF
#
#
####################################################
#
#(cd $AS_ROOT/bin ; ident )
#
#PATH=.:$AS_ROOT/scripts:$AS_ROOT/bin:$PATH ; export PATH
#
for GENOME in $GENOME_LIST ; do
  echo $GENOME $THETIME
  date
  cd $AS_DATA_PATH/$GENOME

  if 
    gmake -f $AS_ROOT/testcases/data_makefile $GENOME.asm
#   lsmake -f $AS_ROOT/testcases/data_makefile $GENOME.cns
  then echo "Assembler successful with $GENOME." ;
  else echo "fatal error" 
mail $USER,asteam <<EOF 
Subject: Assembler $RUN_TAG job $THETIME failed in genome $GENOME.
The Assembler $RUN_TAG job $THETIME failed in genome $GENOME.
The CVS revision AS_PRIV_ASSEMBLER_UNDER_${RUN_TAG}_TEST is in the directory
  $AS_RELEASE_PATH.
The Assembler script stdout is in the file 
  $AS_RELEASE_PATH/$RUN_TAG.output.
The Assembler script data files are in the directory
 $AS_DATA_PATH.
EOF
   rm -f $AS_RELEASE_PATH/$RUN_TAG.lock 
   exit 1 
  fi

done
date
( cd $AS_RELEASE_PATH/cds ; cvs tag -F $CHECK_IN2 )
( cd $AS_RELEASE_PATH/cds ; cvs tag -F $CHECK_IN3 )
rm -f $AS_RELEASE_PATH/$RUN_TAG.lock 
#
#
#
######################################################
#
mail $USER,asteam <<EOF 
Subject: Assembler $RUN_TAG job $THETIME succeeded
The Assembler $RUN_TAG job $THETIME suceeded.
The CVS revision $CHECK_IN2 is updated.
The Assembler script stdout is in the file 
  $AS_RELEASE_PATH/$RUN_TAG.output.
EOF
#
exit 0
