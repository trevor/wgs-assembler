{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f10\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}
{\f35\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f40\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier (PCL6);}{\f41\froman\fcharset0\fprq2{\*\panose 02020404030301010803}Garamond;}
{\f42\fmodern\fcharset0\fprq1{\*\panose 020b0609040504020204}Lucida Console;}{\f43\fscript\fcharset0\fprq2{\*\panose 030f0702030302020204}Comic Sans MS;}{\f84\froman\fcharset238\fprq2 Times New Roman CE;}
{\f85\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f87\froman\fcharset161\fprq2 Times New Roman Greek;}{\f88\froman\fcharset162\fprq2 Times New Roman Tur;}{\f89\froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\f90\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f91\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f92\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f104\fmodern\fcharset238\fprq1 Courier New CE;}
{\f105\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f107\fmodern\fcharset161\fprq1 Courier New Greek;}{\f108\fmodern\fcharset162\fprq1 Courier New Tur;}{\f109\fmodern\fcharset177\fprq1 Courier New (Hebrew);}
{\f110\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f111\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f112\fmodern\fcharset163\fprq1 Courier New (Vietnamese);}{\f434\fswiss\fcharset238\fprq2 Tahoma CE;}{\f435\fswiss\fcharset204\fprq2 Tahoma Cyr;}
{\f437\fswiss\fcharset161\fprq2 Tahoma Greek;}{\f438\fswiss\fcharset162\fprq2 Tahoma Tur;}{\f439\fswiss\fcharset177\fprq2 Tahoma (Hebrew);}{\f440\fswiss\fcharset178\fprq2 Tahoma (Arabic);}{\f441\fswiss\fcharset186\fprq2 Tahoma Baltic;}
{\f442\fswiss\fcharset163\fprq2 Tahoma (Vietnamese);}{\f443\fswiss\fcharset222\fprq2 Tahoma (Thai);}{\f494\froman\fcharset238\fprq2 Garamond CE;}{\f495\froman\fcharset204\fprq2 Garamond Cyr;}{\f497\froman\fcharset161\fprq2 Garamond Greek;}
{\f498\froman\fcharset162\fprq2 Garamond Tur;}{\f501\froman\fcharset186\fprq2 Garamond Baltic;}{\f504\fmodern\fcharset238\fprq1 Lucida Console CE;}{\f505\fmodern\fcharset204\fprq1 Lucida Console Cyr;}{\f507\fmodern\fcharset161\fprq1 Lucida Console Greek;}
{\f508\fmodern\fcharset162\fprq1 Lucida Console Tur;}{\f514\fscript\fcharset238\fprq2 Comic Sans MS CE;}{\f515\fscript\fcharset204\fprq2 Comic Sans MS Cyr;}{\f517\fscript\fcharset161\fprq2 Comic Sans MS Greek;}
{\f518\fscript\fcharset162\fprq2 Comic Sans MS Tur;}{\f521\fscript\fcharset186\fprq2 Comic Sans MS Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;
\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{
\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{\*\cs10 \additive \ssemihidden Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}{\s15\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\adjustright\rin0\lin0\itap0 
\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext15 header;}{\s16\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext16 footer;}{
\s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext17 Indent;}{\s18\ql \li0\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin0\itap0 
\b\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon15 \snext18 Myheader;}{\s19\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext19 Plain Text;}{\*\cs20 
\additive \ul\cf2 \sbasedon10 Hyperlink;}{\*\cs21 \additive \ul\cf12 \sbasedon10 FollowedHyperlink;}{\*\cs22 \additive \b \sbasedon10 Strong;}{\s23\qj \li1627\ri1526\sb120\sl-200\slmult0\widctlpar\tx1620\faauto\adjustright\rin1526\lin1627\itap0 
\f43\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon17 \snext23 Comment;}{\s24\qj \li1627\ri1526\sb120\sl-200\slmult0\widctlpar\brdrt\brdrs\brdrw10\brsp20\brdrcf16 \brdrl\brdrs\brdrw10\brsp80\brdrcf16 \brdrb\brdrs\brdrw10\brsp20\brdrcf16 
\brdrr\brdrs\brdrw10\brsp80\brdrcf16 \tx1620\faauto\adjustright\rin1526\lin1627\rtlgutter\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon23 \snext24 BoxStyle;}{\s25\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \cbpat9 
\f35\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext25 \ssemihidden Document Map;}{\s26\qc \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext26 
Body Text;}{\*\cs27 \additive \i \sbasedon10 Emphasis;}}{\*\listtable{\list\listtemplateid-861491422\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext
\'01\u-3874 ?;}{\levelnumbers;}\f3\fbias0 \fi-2895\li3975\jclisttab\tx3975\lin3975 }{\listname ;}\listid11763659}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0
\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid343440738}{\list\listtemplateid67698703\listsimple{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid395664340}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid442043960}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid913707732}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid945191311}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid993988829}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid1110707399}{\list\listtemplateid67698689\listsimple
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid1282688956}
{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname 
;}\listid1446192250}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 
}{\listname ;}\listid1525821809}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360
\jclisttab\tx360\lin360 }{\listname ;}\listid1530872176}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 
\fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid1597520777}{\list\listtemplateid1057524370\listsimple{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers
\'01;}\fbias0 \fi-360\li720\jclisttab\tx720\lin720 }{\listname ;}\listid1645040802}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid1675762918}{\list\listtemplateid67698689\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0
\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid1848324291}}{\*\listoverridetable{\listoverride\listid1645040802\listoverridecount0\ls1}{\listoverride\listid913707732
\listoverridecount0\ls2}{\listoverride\listid1530872176\listoverridecount0\ls3}{\listoverride\listid1848324291\listoverridecount0\ls4}{\listoverride\listid343440738\listoverridecount0\ls5}{\listoverride\listid1675762918\listoverridecount0\ls6}
{\listoverride\listid1282688956\listoverridecount0\ls7}{\listoverride\listid945191311\listoverridecount0\ls8}{\listoverride\listid993988829\listoverridecount0\ls9}{\listoverride\listid395664340\listoverridecount0\ls10}{\listoverride\listid11763659
\listoverridecount0\ls11}{\listoverride\listid1110707399\listoverridecount0\ls12}{\listoverride\listid1525821809\listoverridecount0\ls13}{\listoverride\listid442043960\listoverridecount0\ls14}{\listoverride\listid1597520777\listoverridecount0\ls15}
{\listoverride\listid1446192250\listoverridecount0\ls16}}{\*\rsidtbl \rsid10971475\rsid16078460}{\*\generator Microsoft Word 10.0.4524;}{\info{\title NAME}{\author Gene Myers}{\keywords type field message struct enum }
{\doccomm _<field2>;__\'0d                              __\'0d<declaration>__\'93type\'94 <id=TYPE> \'93=\'94 <data_type> | <struct_type=TYPE>\'0d<data_type>__<int_type>\'0dT(<data_type>  <struct_type>)\'0d_<struct_type>__\'93struct\'94 \'93\{\'94 <fi
eld_dec> + \'93\}\'94\'0d}{\operator Jason Miller}{\creatim\yr1999\mo12\dy5\hr16\min39}{\revtim\yr2004\mo2\dy9\hr16\min13}{\printim\yr1999\mo11\dy16\hr16\min15}{\version4}{\edmins1}{\nofpages14}{\nofwords6619}{\nofchars37734}{\*\company Celera Genomics}
{\nofcharsws44265}{\vern16475}}\margl1530\margr1440 \widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\formshade\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3
\jcompress\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot\nolnhtadjtbl\rsidroot10971475 \fet0\sectd \linex0\headery450\endnhere\sectdefaultcl\sftnbj {\header \pard\plain \s15\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\adjustright\rin0\lin0\itap0 
\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b\cf16\insrsid16078460 CONFIDENTIAL}{\cf16\insrsid16078460 \tab }{\b\fs28\cf16\insrsid16078460 Celcio}{\cf16\insrsid16078460 \tab }{\field{\*\fldinst {\cf16\cgrid0\insrsid16078460  DATE \\
@ "MM/dd/yy" }}{\fldrslt {\cf16\lang1024\langfe1024\cgrid0\noproof\insrsid16078460 02/09/04}}}{\cf16\insrsid16078460 
\par Assembly Team
\par }}{\footer \pard\plain \s16\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cgrid0\insrsid16078460 \tab - }{\field{\*\fldinst {\cgrid0\insrsid16078460  PAGE }
}{\fldrslt {\lang1024\langfe1024\cgrid0\noproof\insrsid16078460 14}}}{\cgrid0\insrsid16078460  -}{\insrsid16078460 
\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}
{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \s18\ql \li0\ri0\sb120\widctlpar\tqr\tx8550\faauto\adjustright\rin0\lin0\itap0 
\b\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 CELCIO(1)\tab CELCIO(1)
\par }\pard \s18\ql \li0\ri0\sb120\widctlpar\tqr\tx8550\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 {\insrsid16078460 NAME
\par }\pard\plain \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 celcio  }{\insrsid16078460 {\field{\*\fldinst SYMBOL 45 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}
{\insrsid16078460   Celera C-language I/O subsystem generator.
\par }\pard\plain \s18\ql \li0\ri0\sb120\widctlpar\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 SYNOPSIS
\par }\pard\plain \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 celcio [-r[123]] [-v]  <datafile>
\par }\pard\plain \s18\ql \li0\ri0\sb120\widctlpar\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 DESCRIPTION
\par }\pard\plain \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\i\insrsid16078460 Celcio }{\insrsid16078460 
reads a specification of all messages to be read and written in a contemplated production pipeline.  Given the specification, }{\i\insrsid16078460 celcio}{\insrsid16078460  produces a C-language \'93.h\'94 header file for the messages and a \'93.c\'94 lib
rary file of routines that read and write the specified messages in both ASCII and binary formats.
\par Apart from the obvious productivity gained by not having to write I/O routines, the purpose of }{\i\insrsid16078460 celcio}{\insrsid16078460  is to permit one to import and export ASCII-encoded des
criptions of C-structures in a consistent manner and to permit the binary exchange of such messages between components of an operating pipeline in an architecture-independent manner.  }{\i\insrsid16078460 Celcio}{\insrsid16078460 
 is limited to non-circular structures that do not involve the data-overlays implied by unions.  In a subsequent development we may build a system capable of automatically reading and writing a program\rquote s start and final state.  }{
\i\insrsid16078460 Celcio}{\insrsid16078460  would provide a substrate for such a system.
\par }\pard \s17\qj \li0\ri0\sb120\widctlpar\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 {\b\insrsid16078460 
\par 0. Syntactic Conventions:
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 We will be defining the syntax of a }{\i\insrsid16078460 celcio}{\insrsid16078460 
 specification file with a context free grammar.  Non-terminals are enclosed in angle braces, e.g. }{\f2\fs18\insrsid16078460 <spec>}{\insrsid16078460 , terminal string in quotes, e.g. }{\f2\fs18\insrsid16078460 \'93array\'94}{\insrsid16078460 
, and a rule consists of a nonterminal, an arrow (}{\f2\fs18\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 9}{\fldrslt\f3\fs18}}}{\insrsid16078460 ), 
and a regular expression of terminals and nonterminals.  For regular expressions we use the }{\i\insrsid16078460 egrep}{\insrsid16078460 
 operator symbols: | for alternation, juxtaposition for concatenation, * for 0 or more, + for 1 or more, and ? for 0 or 1.  A terminal string in quotes may actually be an }{\i\insrsid16078460 egrep}{\insrsid16078460 
 regular expression in which case the terminal can be any string matching the expression.
\par White space may occur between any parts of speech separated by white space in the grammar specification, and indeed in some cases it is necessary to do so in order for }{\i\insrsid16078460 celcio}{\insrsid16078460 
 to be able to unambiguously parse the specification.  Note carefully, however, that white space is not permitted within terminals.  For example, in the left hand side \endash  }{\f2\fs18\insrsid16078460 \'93array\'94 \'93[\'94 <id> \'93]\'94 \'93of\'94 
\'93float(32|64)\'94 }{\insrsid16078460 \endash  white space is permitted between \'93array\'94 and \'93[\'94, not permitted between \'93float\'94 and \'9332\'94, and required between \'93of\'94 and \'93float\'94.
\par In an attempt to convey some (but not all) type information within the grammar we often follow the name of a nonterminal with either a colon, \'93:\'94, or an equal-sign, \'93=\'94
, followed by a type name chosen to suggest the meaning or type of the nonterminal.  The use of an equal-sign implies that the type is assigned by the current context and a colon signifies the nonterminal should be of the given type.
  For example, we will class identifiers as being in one of the three categories \endash  TYPE, FIELD, and ENUM \endash  for datatype names, field names, and enum value names respectively.
\par }\pard \s17\qj \li0\ri0\sb120\widctlpar\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 {\b\insrsid16078460 
\par 1. Specification of Messages:
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 A }{\i\insrsid16078460 celcio}{\insrsid16078460  specification consists of an initial 
header section describing the manner by which message types will be enumerated followed by a series of data type declarations in a syntax that is a hybrid of the C and Pascal language styles.
\par }\pard \s17\qj \li720\ri0\sb120\widctlpar\tx1530\tx1890\faauto\outlinelevel0\adjustright\rin0\lin720\itap0 {\f2\fs18\insrsid16078460 <spec>\tab }{\f2\fs18\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 9}{\fldrslt\f3\fs18}}}{
\f2\fs18\insrsid16078460 \tab <header> <declaration> *
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\tx1530\tx1890\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 Comments within a specification begin with \'93//\'94
 and continue to the end of the current line.  They may begin where ever white space is permitted.  In order to avoid naming conflicts with names that }{\i\insrsid16078460 celcio }{\insrsid16078460 must create in its translation of a specification, a
 user should not use identifiers that begin with the prefix \'93_CIO_\'94.
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 
In the header declaration, the user specifies the type name for an enumerative type that will contain an enum value for every distinct message declared in the remainder of the specification.  Every }{\i\insrsid16078460 celcio}{\insrsid16078460 
 message is a struct whose first field will be a value of this type.  The name of the field is specified followed by a template for constructing the names of the enum values.  The template is a C-identifier that has an ampersand (\lquote &\rquote ) some
where within it.  Each }{\i\insrsid16078460 celcio}{\insrsid16078460  message structure has one or more unique 3-letter codes associated with it and it is these 3-codes that will be substituted for the template\rquote s & to construct the enum values. 

\par }\pard \s17\qj \li720\ri0\sb120\widctlpar\tx1710\tx2070\faauto\adjustright\rin0\lin720\itap0 {\f2\fs18\insrsid16078460 
\par <header>\tab }{\f2\fs18\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 9}{\fldrslt\f3\fs18}}}{\f2\fs18\insrsid16078460 \tab \'93init\'94 <id=TYPE> \'93=\'94 <id=FIELD> \'93:\'94 <template>
\par }\pard \s17\qj \li1080\ri0\sb120\widctlpar\tx2340\tx2700\faauto\adjustright\rin0\lin1080\itap0 {\f2\fs18\insrsid16078460 <id>\tab }{\f2\fs18\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 9}{\fldrslt\f3\fs18}}}{\f2\fs18\insrsid16078460 
\tab \'93[a-zA-Z_][a-zA-Z_0-9]*\'94
\par <template>\tab }{\f2\fs18\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 9}{\fldrslt\f3\fs18}}}{\f2\fs18\insrsid16078460 \tab \'93([a-zA-Z_][a-zA-Z_0-9]*)?&[a-zA-Z_0-9]*\'94
\par }\pard \s17\qj \li360\ri0\sb320\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 For example, suppose one specifies the declaration }{\f2\fs18\insrsid16078460 \'93init MessageTypes = mtype:AS_&_MESG\'94}{\insrsid16078460 
, and further suppose that in the remainder of the specification, messages with 3-codes }{\f2\fs18\insrsid16078460 FRG}{\insrsid16078460 , }{\f2\fs18\insrsid16078460 IFG}{\insrsid16078460 , and }{\f2\fs18\insrsid16078460 SFG}{\insrsid16078460 
 are introduced.  Then }{\i\insrsid16078460 celcio}{\insrsid16078460  will produce a declaration for }{\f2\fs18\insrsid16078460 MessageTypes}{\insrsid16078460  that has the type }{\f2\fs18\insrsid16078460 \'93enum \{ AS_FRG_MESG, AS_IFG_MESG, AS_SFG_MESG
\}\'94}{\insrsid16078460  and will explicitly place a field named }{\f2\fs18\insrsid16078460 mtype}{\insrsid16078460  over this domain at the start of every message struct.
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 Each declaration associates a data type with an identifier.  There are two types of declarations.   Those that begin with the keyword \'93message\'94 indi
cate to }{\i\insrsid16078460 celcio}{\insrsid16078460  that it should construct a read and write routine for this datatype.  For such messages the data type must further be a structure.  The remaining declarations, beginning with the keyword \'93type\'94
, are used to hierarchically build the datatype of  a complex message.  }{\i\insrsid16078460 Celcio}{\insrsid16078460  restricts struct definitions to the top level of a type declaration so that every struct has a type name associated with it.
\par }\pard \s17\qj \li720\ri0\sb160\widctlpar\tx2340\tx2700\faauto\adjustright\rin0\lin720\itap0 {\f2\fs18\insrsid16078460 
\par <declaration>\tab }{\f2\fs18\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 9}{\fldrslt\f3\fs18}}}{\f2\fs18\insrsid16078460 \tab \'93type\'94 <id=TYPE> \'93=\'94 <data_type> | <struct_type=TYPE>
\par }\pard \s17\qj \li720\ri0\sb120\widctlpar\tx2340\tx2700\faauto\adjustright\rin0\lin720\itap0 {\f2\fs18\insrsid16078460 \tab |\tab \'93message\'94 <id=TYPE> \'93=\'94 <struct_type=MESG>
\par }\pard \s17\qj \li360\ri0\sb320\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 
Datatypes can be built up with structure, list, sequence, and array constructors over a set of base types consisting of integers, reals, strings, enums, and chars.
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb240\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls4\adjustright\rin0\lin720\itap0 {\insrsid16078460 The sizes of the integer and float base types is indicated by following the keyword by the number of bits in the type.  Integers can further be specified as unsigned with the \'93uint\'94
 keyword.
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb60\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls4\adjustright\rin0\lin720\itap0 {\insrsid16078460 A string is a sequentially allocated array of chars ends at the first 0-value element.  This is C\rquote s concept of a string.
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb60\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls4\adjustright\rin0\lin720\itap0 {\insrsid16078460 An enum type is exactly as for C, the additional \'93one-code\'94
 enclosed in parens following each enum value is for the purposes of ASCII-based I/O (see Section 5) and is any printable, non-space character.  The one-codes used within an enum
 must be distinct, whereas the enum values must be distinct across all enums, as dictated by C\rquote s semantics.
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb60\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls4\adjustright\rin0\lin720\itap0 {\insrsid16078460 A list type is a linked list of the indicated data type.  }{\i\insrsid16078460 Celcio}{\insrsid16078460  provides primitives to walk and manipulate this datatype (see Section 4.).
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb60\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls4\adjustright\rin0\lin720\itap0 {\insrsid16078460 A sequence type is a sequentially allocated sequence of the indicated datatype where the length is }{\i\insrsid16078460 implicitly}{\insrsid16078460 
 part of the datatype.  Its length need not be known before the object is read from input although an upperbound on it may optionally be given in the input as an aid to }{\i\insrsid16078460 celcio}{\insrsid16078460 \rquote 
s memory allocator (see Section 5.).
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb60\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls4\adjustright\rin0\lin720\itap0 {\insrsid16078460 An array type is a sequentially allocated sequence of the indicated datatype where the number of elements is }{\i\insrsid16078460 explicitly}{\insrsid16078460 
 given by the identifier between the square braces.  This identifier m
ust be a field of type integer, list, sequence, or string in the current or an enclosing structure.  If there are several nested structures that contain the array and have the given identifier as a field name, then the array identifier refers to the field
 
declaration of the innermost enclosing structure.  This field must be declared in such a position that it is always read in before the array.  If the type is list, sequence, or string, then the reference is implicitly to the length of the list, sequence, 
or string.
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb60\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls4\adjustright\rin0\lin720\itap0 {\insrsid16078460 A reference to a previous declared type identifier is a datatype.
\par }\pard \s17\qj \li720\ri0\sb160\widctlpar\tx2070\tx2430\faauto\adjustright\rin0\lin720\itap0 {\f2\fs18\insrsid16078460 
\par <data_type>\tab }{\f2\fs18\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 9}{\fldrslt\f3\fs18}}}{\f2\fs18\insrsid16078460 \tab <int_type>
\par }\pard \s17\qj \li720\ri0\sb120\widctlpar\tx2070\tx2430\faauto\adjustright\rin0\lin720\itap0 {\f2\fs18\insrsid16078460 \tab |\tab \'93float(32|64)\'94 
\par \tab |\tab \'93string\'94
\par \tab |\tab \'93enum\'94 \'93\{\'94 ( <enum_con> \'93,\'94 )* <enum_con> \'93\}\'94
\par \tab |\tab \'93list\'94 \'93of\'94 <data_type>
\par \tab |\tab \'93sequence\'94 \'93of\'94 <data_type>
\par \tab |\tab \'93array\'94 \'93[\'94 <id:FIELD> \'93]\'94 \'93of\'94 <data_type>
\par \tab |\tab <id:TYPE>
\par }\pard \s17\qj \li1080\ri0\sb240\widctlpar\tx2340\tx2700\faauto\adjustright\rin0\lin1080\itap0 {\f2\fs18\insrsid16078460 <int_type>\tab }{\f2\fs18\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 9}{\fldrslt\f3\fs18}}}{
\f2\fs18\insrsid16078460 \tab \'93u?int(8|16|32|64)\'94  |  \'93char\'94
\par }\pard \s17\qj \li1080\ri0\sb120\widctlpar\tx2340\tx2700\faauto\adjustright\rin0\lin1080\itap0 {\f2\fs18\insrsid16078460 <enum_con>\tab }{\f2\fs18\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 9}{\fldrslt\f3\fs18}}}{
\f2\fs18\insrsid16078460 \tab <id=ENUM> \'93(\'94<1_code>\'93)\'94
\par }\pard \s17\qj \li1440\ri0\sb120\widctlpar\tx2700\tx3060\faauto\adjustright\rin0\lin1440\itap0 {\f2\fs18\insrsid16078460 <1_code>\tab }{\f2\fs18\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 9}{\fldrslt\f3\fs18}}}{
\f2\fs18\insrsid16078460 \tab \'93[!-~]\'94
\par }\pard \s17\qj \li360\ri0\sb240\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 
Lists, sequences, and arrays present three different ways to organize and model a homogenous collection of data elements.  From a data structure point of view lists are realized as singly linked lists that must be accessed serially whereas arrays a
nd sequences are realized as contiguous memory blocks that may be accessed by indexing.  From an input/output perspective, the lengths of lists and sequences need not be known ahead of time whereas an array\rquote 
s length field must be input before the array.  T
his makes space allocation for sequences difficult to realize with the same efficiency and overhead when a bound on its length is not given as part of the input.  Thus one has a tradeoff: lists and arrays can be efficiently allocated, arrays and sequences
 
can be efficiently accessed, and the length of lists and sequences need not be known in advance.  One should select a representation with these tradeoffs in mind.  One should further note that strings are identical to sequences in properties, save the man
ner in which the length of the string is encoded.
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 In its basic form, a structure declaration consist of the keyword \'93struct\'94
 followed by a list of field declarations inside a pair of curly braces.  Each field declaration consists of a field name and a data 
type separated by a colon.  Structures that have been declared to be messages must have one or more 3-codes associated with them to permit the }{\i\insrsid16078460 celcio}{\insrsid16078460 
 ASCII reader to determine the type of struct it is about to read.  A 3-code is a C-identifier of length exactly 3.  These are the 3-codes referred to earlier in describing the }{\f2\fs18\insrsid16078460 \'93init\'94}{\insrsid16078460 
 line of a specification.  How these are used in an ASCII encoding is described in the last section of this document.
\par }\pard \s17\qj \li720\ri0\sb240\widctlpar\tx2880\tx3240\faauto\adjustright\rin0\lin720\itap0 {\f2\fs18\insrsid16078460 <struct_type:TYPE>\tab }{\f2\fs18\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 9}{\fldrslt\f3\fs18}}}{
\f2\fs18\insrsid16078460 \tab \'93struct\'94 \'93\{\'94 <field_dec> + \'93\}\'94
\par <struct_type:MESG>\tab }{\f2\fs18\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 9}{\fldrslt\f3\fs18}}}{\f2\fs18\insrsid16078460 \tab \'93struct\'94 \'93(\'94 <3_code=MESG> (\'93,\'94 <3_code=MESG>)* \'93)\'94
\par }\pard \s17\qj \li720\ri0\sb120\widctlpar\tx2610\tx2970\faauto\adjustright\rin0\lin720\itap0 {\f2\fs18\insrsid16078460 \tab \tab \tab \'93\{\'94 <field_dec>+ \'93\}\'94
\par }\pard \s17\qj \li1080\ri0\sb120\widctlpar\tx2430\tx2790\faauto\adjustright\rin0\lin1080\itap0 {\f2\fs18\insrsid16078460 <field_dec>\tab }{\f2\fs18\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 9}{\fldrslt\f3\fs18}}}{
\f2\fs18\insrsid16078460 \tab <id=FIELD> \'93:\'94 <data_type>
\par }\pard \s17\qj \li1440\ri0\sb120\widctlpar\tx2430\tx2790\faauto\adjustright\rin0\lin1440\itap0 {\f2\fs18\insrsid16078460 <3_code>\tab }{\f2\fs18\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 9}{\fldrslt\f3\fs18}}}{
\f2\fs18\insrsid16078460 \tab \'93[_A-Za-z][_A-Za-z0-9][ _A-Za-z0-9]\'94
\par }\pard \s17\qj \li360\ri0\sb240\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 
As an object flows through a pipeline, it is often the case that various stages add information to the object while some information becomes irrelevant after a certain point.  To support this idea, }{\i\insrsid16078460 celcio}{\insrsid16078460 
 messages can be thought of as }{\i\insrsid16078460 containers}{\insrsid16078460 
 that can hold all the information that would ever be relevant to that type of object as it flows through the system.  Enum-valued fields within the container are responsible for describing which fields/components o
f the message are currently meaningful.  This could be accomplished, without further addition, by simply passing every field of the container between every stage of a pipeline regardless of its current utility and insuring that every unused field has been
 set to some legitimate but otherwise arbitrary value.  }{\i\insrsid16078460 Celcio}{\insrsid16078460 
 provides additional constructs to avoid the overhead of having to read and write unused fields and to further explicitly document the usage of fields in a container message.  
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 Within the field list of a }{\i\insrsid16078460 celcio}{\insrsid16078460 
 struct declaration, one may introduce if-else constructs where the conditionals are simple predicates based on enum-fields within a message. An if-else construct conditionally determines which of the two field sub-lists following the if-pre
dicate and the else keyword are to be read and written by }{\i\insrsid16078460 celcio}{\insrsid16078460 
.  The constructs may be nested and chained.  The predicates consist simply of a reference to a field of type enum that was read/written earlier in the processing of the message, followed by a contained-in (\'93<\'94) or not-contained-in (\'93!<\'94
) predicate followed by a list of relevant scalar values in square brackets.
\par }\pard \s17\qj \li720\ri0\sb240\widctlpar\tx1980\tx2340\faauto\adjustright\rin0\lin720\itap0 {\f2\fs16\insrsid16078460 <field_dec> }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{\f2\fs16\insrsid16078460 
\tab \'93if\'94 \'93(\'94 <condition> \'93)\'94 <field_list>
\par }\pard \s17\qj \li720\ri0\sb120\widctlpar\tx1980\tx2340\faauto\adjustright\rin0\lin720\itap0 {\f2\fs16\insrsid16078460 \tab \tab ( \'93else\'94 <field_list> ) ?
\par }\pard \s17\qj \li1080\ri0\sb120\widctlpar\tx2520\tx2880\faauto\adjustright\rin0\lin1080\itap0 {\f2\fs16\insrsid16078460 <field_list>\tab }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{
\f2\fs16\insrsid16078460 \tab <field_dec>
\par \tab |\tab \'93\{\'94 <field_dec> +  \'93\}\'94
\par }\pard \s17\qj \li1080\ri0\sb120\widctlpar\tx2340\tx2700\faauto\adjustright\rin0\lin1080\itap0 {\f2\fs16\insrsid16078460 <condition>\tab }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{
\f2\fs16\insrsid16078460 \tab <id:FIELD> \'93!?<\'94 \'93[\'94 ( <id:ENUM> \'93,\'94 ) * <id:ENUM> \'93]\'94
\par }\pard \s17\qj \li360\ri0\sb240\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 Note that a given message container struct can have several 3-codes associated with it.  The idea is 
that each 3-code determines a different usage pattern for the fields of the container.  The implicit type field of the message is set to a different enum value depending on the 3-code, and conditional clauses may be formulated around the type field value 
to control field usage.  Indeed, in an if-predicate, when the field reference is to the message\rquote 
s implicit type field, then in the list of scalar values one may use the 3-codes for the messages as opposed to the scalar value generated by the template given in the \'93init\'94 declaration.
\par }\pard \s17\qj \li720\ri0\sb320\widctlpar\tx1980\tx2340\faauto\adjustright\rin0\lin720\itap0 {\f2\fs16\insrsid16078460 <condition>\tab <-\tab <id:FIELD> \'93!?<\'94 \'93[\'94 ( <3_code:MESG> \'93,\'94 ) * <3_code:MESG> \'93]\'94
\par }\pard \s17\qj \li360\ri0\sb240\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 We conclude this section with a complete example of a }{\i\insrsid16078460 celcio}{\insrsid16078460 
 specification.  There are three types of messages all fitting in a container struct of type Fragment.  The first field of this container contains the implicitly declared field \'93mtype\'94 as described earlier.  The field \'93iaccess\'94
 is not contained in FRG-messages.  If the field \'93action\'94 has value \'93AS_ADD\'94 in a given message, then the message contains the \'93sequence\'94 and \'93quality\'94 fields, and the \'93screen\'94
 field if it is further an SFG-message.  Note that the quality array is declared to be of the same length as the sequence.
\par }\pard \s17\qj \li2160\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin2160\itap0 {\f2\fs16\insrsid16078460 
\par init MessageTypes = mtype:AS_&_MESG
\par }\pard \s17\qj \li2160\ri0\widctlpar\faauto\adjustright\rin0\lin2160\itap0 {\f2\fs16\insrsid16078460 
\par type ActionType = enum \{ AS_ADD(A), AS_DELETE(D) \}
\par 
\par type ScreenMatch = struct \{
\par                       what: int32
\par                       beg : int32
\par                       end : int32
\par                    \}
\par 
\par message Fragment = struct(FRG,IFG,SFG) \{
\par \tab \tab \tab action   : ActionType
\par \tab \tab \tab accession: int64
\par \tab \tab \tab if (mtype !< [FRG])
\par \tab \tab \tab   iaccess: int32
\par \tab \tab \tab if (action < [AS_ADD])
\par \tab \tab \tab   \{ sequence: string
\par \tab \tab \tab     quality : array [sequence] of uint8
\par \tab \tab \tab     if (mtype < [SFG])
\par \tab \tab \tab \tab screen: list of ScreenMatch
\par \tab \tab \tab   \}
\par \tab \tab      \}
\par 
\par }\pard \s17\ql \fi720\li2160\ri0\widctlpar\faauto\adjustright\rin0\lin2160\itap0 {\b\fs22\ul\insrsid16078460 Figure 1:}{\insrsid16078460   A complete }{\i\insrsid16078460 celcio}{\insrsid16078460  specification.
\par }\pard \s17\qc \li720\ri0\widctlpar\faauto\adjustright\rin0\lin720\itap0 {\insrsid16078460 
\par 
\par }\pard \s17\qj \li0\ri0\sb120\widctlpar\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 {\b\insrsid16078460 2. Semantic Checking and Field Reference Binding Details:
\par }\pard \s17\qj \li360\ri0\sb120\sa120\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 To the extent possible, }{\i\insrsid16078460 celcio}{\insrsid16078460 
 semantically checks its input as it parses it in a forward scan through the specification.  During the scan the following conditions are checked in addition to the restr
ictions imposed by the syntax of the previous section.  Violation of any of these conditions results in an error message and compilation terminates prematurely.
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb60\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls8\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls8\adjustright\rin0\lin720\itap0 {\insrsid16078460 All usages of a type or enum-value identifier occur after their defining usage.  This is always possible to arrange in }{\i\insrsid16078460 celcio}{\insrsid16078460 
 as it does not permit circular data structures.  Note that the references to field identifiers as an array\rquote s index or part of a container conditional are exempted.  Their binding to a defined instance is deferred to the second semantic pass.

\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb60\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls5\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls5\adjustright\rin0\lin720\itap0 {\insrsid16078460 Duplicate definitions of an enum value or a datatype name are detected, as are duplicate definitions of a field name within a struct (including the implicitly defined message type field).
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb60\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls5\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls5\adjustright\rin0\lin720\itap0 {\insrsid16078460 Duplicate definitions of 3-codes for a struct, or for fields within a struct are detected.  Also duplicate 1-codes within an enum declaration are detected.
\par }\pard \s17\qj \li360\ri0\sb60\sa120\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 We term the usage of a field name as an array index or in a container conditional, as a field refere
nce.  The binding of a field reference to a field definition takes place in a second semantic pass.  This  is necessary, because it is often impossible to }{\i\insrsid16078460 simultaneously}{\insrsid16078460 
 arrange for type references and field references to always follow their defining instances.  Consider the following example:
\par }\pard \s17\qj \li1080\ri0\sb60\widctlpar\faauto\adjustright\rin0\lin1080\itap0 {\f2\fs18\insrsid16078460 type A = struct \{ \'85 array [x] of int32 \'85 \}
\par message B = struct \{ \'85 x: int16; \'85 y: list of A; \'85 \}
\par message C = struct \{ \'85 x: int32; \'85 z: A; \'85 \}}{\insrsid16078460 
\par }\pard \s17\qj \li360\ri0\sb60\sa120\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 Assume the structure declaration for A does not contain a field named x, thu
s the reference to x as an array index must be resolved to a containing object.  Indeed in B-messages the field reference is bound to a field of type int16 and in C-messages it is bound to a field of type int32.  This late binding of field references perm
its one to declare datatypes that may be differentially instantiated depending on the context in which they are being used.
\par }\pard \s17\qj \li360\ri0\sb60\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 In the second semantic sweep, all implied bindings of a field reference are examined to insure that in each context:
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb60\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls7\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls7\adjustright\rin0\lin720\itap0 {\insrsid16078460 The reference does have some field instance to bind to.
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb60\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls7\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls7\adjustright\rin0\lin720\itap0 {\insrsid16078460 The type of the bound field is correct.
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb60\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls7\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls7\adjustright\rin0\lin720\itap0 {\insrsid16078460 The enum values in a conditional are part of the bound field\rquote s enum range.
\par }\pard \s17\qj \li360\ri0\sb60\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 Failure of any of these checks results in an error and premature termination of compilation.
  In addition a number of warnings, that do not prevent compilation, but are indicative of potential problems, are also detected and reported to the command line port as follows:
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb60\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls9\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls9\adjustright\rin0\lin720\itap0 {\insrsid16078460 Any type definition not used in a message or a subtype of a message is flagged.
\par {\pntext\pard\plain\s17 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb60\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls9\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls9\adjustright\rin0\lin720\itap0 {\insrsid16078460 In the expansion of the definition of a message, }{\i\insrsid16078460 celcio}{\insrsid16078460  symbolically evaluates the conditionals within it and detects the following:
\par {\pntext\pard\plain\s17 \fs20 \hich\af0\dbch\af0\loch\f0 1.\tab}}\pard \s17\qj \fi-360\li1080\ri0\sb60\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec\pnstart1\pnindent360\pnsp120\pnhang {\pntxta .}}
\faauto\ls10\adjustright\rin0\lin1080\itap0 {\insrsid16078460 Conditionals that have no effect, i.e. are equivalent to \'93true\'94.
\par {\pntext\pard\plain\s17 \fs20 \hich\af0\dbch\af0\loch\f0 2.\tab}}\pard \s17\qj \fi-360\li1080\ri0\sb60\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec\pnstart1\pnindent360\pnsp120\pnhang {\pntxta .}}
\faauto\ls10\adjustright\rin0\lin1080\itap0 {\insrsid16078460 Conditionals that are equivalent to \'93false\'94, implying the field sublist within it is never part of a message.
\par {\pntext\pard\plain\s17 \fs20 \hich\af0\dbch\af0\loch\f0 3.\tab}}\pard \s17\qj \fi-360\li1080\ri0\sb60\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec\pnstart1\pnindent360\pnsp120\pnhang {\pntxta .}}
\faauto\ls10\adjustright\rin0\lin1080\itap0 {\insrsid16078460 Field references that occur in conditional contexts that do not necessarily guarantee that the field to which the reference is bound is a part of the message.
\par }\pard \s17\qj \li360\ri0\sb120\sa120\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 We give an example of a specification invoking the last three warning conditions as an aid to their comprehension.
\par }\pard \s17\qj \li720\ri0\widctlpar\faauto\adjustright\rin0\lin720\itap0 {\f2\fs18\insrsid16078460 message bad = struct(BAD) \{
\par                   fd1(fd1): enum \{ A(A), B(B), C(C) \}
\par                   if (fd1 !< [C])
\par                     \{ fd2(fd2): int32
\par }\pard \s17\qj \li720\ri0\widctlpar\tx6120\faauto\adjustright\rin0\lin720\itap0 {\f2\fs18\insrsid16078460                       if (fd1 < [A,B])\tab }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{
\f2\fs18\insrsid16078460  }{\fs18\insrsid16078460 Always true
\par }\pard \s17\qj \li720\ri0\widctlpar\faauto\adjustright\rin0\lin720\itap0 {\f2\fs18\insrsid16078460                         fd3(fd3): int32
\par                     \}
\par }\pard \s17\qj \li720\ri0\widctlpar\tx6120\faauto\adjustright\rin0\lin720\itap0 {\f2\fs18\insrsid16078460                   else if (fd1 !< [C])\tab }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{
\f2\fs18\insrsid16078460  }{\fs18\insrsid16078460 Always false
\par }\pard \s17\qj \li720\ri0\widctlpar\faauto\adjustright\rin0\lin720\itap0 {\f2\fs18\insrsid16078460                     fd4(fd4): int 32
\par }\pard \s17\qj \li720\ri0\widctlpar\tx6120\faauto\adjustright\rin0\lin720\itap0 {\f2\fs18\insrsid16078460                   fd5(fd5): array [fd2] of char\tab }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{
\f2\fs18\insrsid16078460  }{\fs18\insrsid16078460 fd2 not defined when fd1 = C}{\f2\fs18\insrsid16078460 
\par }\pard \s17\qj \li720\ri0\widctlpar\faauto\adjustright\rin0\lin720\itap0 {\f2\fs18\insrsid16078460               \}}{\b\insrsid16078460 
\par }\pard \s17\qj \li0\ri0\sb360\widctlpar\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 {\b\insrsid16078460 3. Translation to Data Declarations:
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 In response to a specification, say \'93}{\f2\fs18\insrsid16078460 fragment}{\insrsid16078460 \'94, }{\i\insrsid16078460 celcio}{\insrsid16078460 
 will produce two files \endash  \'93}{\f2\fs18\insrsid16078460 fragment.h}{\insrsid16078460 \'94 and \'93}{\f2\fs18\insrsid16078460 fragment.c}{\insrsid16078460 \'94, where the file with the \'93.h\'94
 extension contains a C type declaration for every type specified in the input.  Here we detail the exact translation between the input }{\i\insrsid16078460 celcio}{\insrsid16078460  specifications and the output C-declarations, including an ex
ample to aid one\rquote s intuition.
\par Before outputting any user declared types, }{\i\insrsid16078460 celcio}{\insrsid16078460  outputs typedefs for the base types }{\f2\fs18\insrsid16078460 int8}{\insrsid16078460  through }{\f2\fs18\insrsid16078460 int64}{\insrsid16078460 , }{
\f2\fs18\insrsid16078460 uint8}{\insrsid16078460  throught }{\f2\fs18\insrsid16078460 uint64}{\insrsid16078460 , }{\f2\fs18\insrsid16078460 float32}{\insrsid16078460  and }{\f2\fs18\insrsid16078460 float64}{\insrsid16078460 
, tailored to the particular machine on which }{\i\insrsid16078460 celcio}{\insrsid16078460  is being run.  For example, \'93}{\f2\fs18\insrsid16078460 typedef long long int64;}{\insrsid16078460 \'94 on 32-bit machines and \'93}{\f2\fs18\insrsid16078460 
typedef long int64;}{\insrsid16078460 \'94 on 64-bit machines.  After outputting declarations for the user declared types, }{\i\insrsid16078460 celcio}{\insrsid16078460 
 concludes its header file with the declarations for the I/O routines that it will compile and make externally visible in its \'93.c\'94 extension file.
\par Consider the sample specification for \'93Fragment\'94 messages given in Figure 1 earlier.   The datatypes in this }{\i\insrsid16078460 celcio}{\insrsid16078460 
 specification would result in the C-declarations shown in Figure 2.  The first type definition is for the enum that captures the three kinds of messages specified by the user.  The type name for this enum is as specified in the }{
\f2\fs18\insrsid16078460 init}{\insrsid16078460 -line, and the enum values consist of the template with its \'93&\'94 replaced by the 3-codes of each message.  The enum values are mapped to consecutive integers starting at 0.  The type definition for \'93
ActionType\'94 is straightforward, but note that each enum value is mapped to the value of the ASCII code for its associated 1-code.  The other key thing to notice is that the struct definition for \'93Fragment\'94 messages has a field \'93mtype\'94
 of type\'94MessageTypes\'94 as its first field as dictated by the }{\f2\fs18\insrsid16078460 init}{\insrsid16078460 -line of the specification.  Not
e that strings (and also arrays) are mapped to pointers to the base type, and that lists are always of type \'93}{\f2\fs18\insrsid16078460 void *}{\insrsid16078460 \'94 (more on this later).
\par }\pard \s17\qj \li360\ri0\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 
\par }\pard \s17\qj \li2160\ri0\widctlpar\faauto\adjustright\rin0\lin2160\itap0 {\f2\fs16\insrsid16078460 typedef enum \{ AS_FRG_MESG = 0,
\par }\pard \s17\qj \li2160\ri0\widctlpar\faauto\outlinelevel0\adjustright\rin0\lin2160\itap0 {\f2\fs16\insrsid16078460                AS_IFG_MESG = 1,
\par                AS_SFG_MESG = 2 \} MessageTypes;
\par }\pard \s17\qj \li2160\ri0\widctlpar\faauto\adjustright\rin0\lin2160\itap0 {\f2\fs16\insrsid16078460 
\par typedef enum \{ AS_ADD    = \lquote A\rquote ,
\par                AS_DELETE = \lquote D\rquote  \} ActionType;
\par 
\par typedef struct \{ int32 what;
\par                  int32 beg;
\par                  int32 end;  \} ScreenMatch;
\par 
\par typedef struct \{ MessageTypes mtype;
\par                  ActionType   action;
\par                  int32        iaccess;
\par                  char *       sequence;
\par                  uint8 *      quality;
\par                  void *       screen;   \} Fragment;
\par 
\par }\pard \s17\ql \li1440\ri0\widctlpar\faauto\outlinelevel0\adjustright\rin0\lin1440\itap0 {\fs22\insrsid16078460         }{\b\fs22\ul\insrsid16078460 Figure 2:}{\insrsid16078460   C-type declaration for the }{\i\insrsid16078460 celcio}{\insrsid16078460 
 specification of Figure 1.
\par }\pard \s17\qj \li360\ri0\sb60\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 
\par To f
ormally describe the translation to C-types, it helps to simplify the complete grammar of the previous section to the features essential to characterizing the translation.  Specifically, we drop all type information, all mention of 3-codes (necessary only
 for specifying instances of objects), and simplify structures to being just a list of field declarations \endash  the complication of conditional clauses is ignored.  This results in the simple grammar below.
\par }\pard \s17\qj \li720\ri0\sb80\widctlpar\tqr\tx2430\tx2610\tx2970\faauto\adjustright\rin0\lin720\itap0 {\f2\fs16\insrsid16078460 \tab <spec>\tab }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{
\f2\fs16\insrsid16078460 \tab <header> <declaration> *
\par }\pard \s17\qj \li720\ri0\widctlpar\tqr\tx2430\tx2610\tx2970\faauto\adjustright\rin0\lin720\itap0 {\f2\fs16\insrsid16078460 \tab <header>\tab }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{
\f2\fs16\insrsid16078460 \tab \'93init\'94 <id> \'93=\'94 <id> \'93:\'94 <temppart1>\'93&\'94<temppart2>
\par \tab <declaration>\tab }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{\f2\fs16\insrsid16078460 \tab \'93type|message\'94 <id> = (<data_type>|<struct_type>)
\par \tab <data_type>\tab }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{\f2\fs16\insrsid16078460 \tab \'93float(32|64) | u?int(8|16|32|64) | char\'94
\par \tab \tab  |\tab \'93string\'94
\par \tab \tab  |\tab \'93list\'94 \'93of\'94 <data_type>
\par \tab \tab  |\tab \'93sequence\'94 \'93of\'94 <data_type>
\par \tab \tab  |\tab \'93array\'94 \'93[\'94 <id> \'93]\'94 \'93of\'94 <data_type>
\par \tab \tab  |\tab \'93enum\'94 \'93\{\'94 ( <enum_con> \'93,\'94 )* <enum_con> \'93\}\'94
\par \tab \tab  |\tab <id>
\par \tab <enum_con>\tab }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{\f2\fs16\insrsid16078460 \tab <id> \'93(\'94<1_code>\'93)\'94
\par \tab <struct_type>\tab }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{\f2\fs16\insrsid16078460 \tab \'93struct\'94 \'93\{\'94 <field_dec> + \'93\}\'94
\par \tab <field_dec>\tab }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{\f2\fs16\insrsid16078460 \tab <id> \'93:\'94 <data_type>
\par }\pard \s17\qj \li360\ri0\sb320\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 To formally define the translation we define the function }{\f41\fs18\insrsid16078460 T}{\insrsid16078460  that maps a parse tree of a celcio spec
ification to the string containing the desired C type definitions.  We define }{\f41\fs18\insrsid16078460 T}{\insrsid16078460 
 by recursively defining its action on each production of the simplified grammar above.  The result in each case is a string where terminal letters are bold and }{\f41\fs18\insrsid16078460 T}{\insrsid16078460  is recursively
 applied to non-terminals on the r.h.s. of the production as needed.  For example,
\par }\pard \s17\qc \li360\ri0\sb120\widctlpar\faauto\outlinelevel0\adjustright\rin0\lin360\itap0 {\f41\fs18\insrsid16078460 T}{\f2\fs18\insrsid16078460 (<A> }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{
\f2\fs18\insrsid16078460  <B> <C> \'93;\'94) }{\f2\fs18\insrsid16078460 {\field{\*\fldinst SYMBOL 222 \\f "Symbol" \\s 9}{\fldrslt\f3\fs18}}}{\f2\fs18\insrsid16078460  }{\b\f2\fs18\insrsid16078460 some}{\f2\fs18\insrsid16078460  }{
\f41\fs18\insrsid16078460 T}{\f2\fs18\insrsid16078460 (<B>) }{\b\f2\fs18\insrsid16078460 text}{\insrsid16078460 
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 In the cases where the yield of a non-terminal is needed in the functional result, we introduce a variable in the non-terminal\rquote 
s angle brackets and use it in the string, e.g. in
\par }\pard \s17\qc \li360\ri0\sb120\widctlpar\faauto\outlinelevel0\adjustright\rin0\lin360\itap0 {\f41\fs18\insrsid16078460 T}{\f2\fs18\insrsid16078460 (<A> }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{
\f2\fs18\lang1024\langfe1024\noproof\insrsid16078460  }{\f2\fs18\insrsid16078460 <}{\b\f2\fs18\insrsid16078460 x}{\f2\fs18\insrsid16078460  }{\f2\fs18\insrsid16078460 {\field{\*\fldinst SYMBOL 206 \\f "Symbol" \\s 9}{\fldrslt\f3\fs18}}}{
\f2\fs18\insrsid16078460  id>) }{\f2\fs18\insrsid16078460 {\field{\*\fldinst SYMBOL 222 \\f "Symbol" \\s 9}{\fldrslt\f3\fs18}}}{\f2\fs18\insrsid16078460  }{\b\f2\fs18\insrsid16078460 x}{\insrsid16078460 
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 the variable \lquote x\rquote  matches the yield of <id> in the particular specification.}{\f41\fs18\insrsid16078460 
\par }\pard \s17\qj \li360\ri0\sb180\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 We now define the action of T on each production of the grammar immediately above in the order they are listed followed immediately by a textual explanation.

\par }\pard \s17\qj \fi720\li360\ri0\sb240\widctlpar\tqr\tx7920\faauto\outlinelevel0\adjustright\rin0\lin360\itap0 {\f41\fs16\insrsid16078460 T}{\f2\fs16\insrsid16078460 (<spec> }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol"
 \\s 8}{\fldrslt\f3\fs16}}}{\f2\fs16\insrsid16078460  <header> <declaration> *)  }{\insrsid16078460 {\field{\*\fldinst SYMBOL 222 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}{\f2\fs16\insrsid16078460   }{\f41\fs16\insrsid16078460 T}{\f2\fs16\insrsid16078460 
(<header>) (}{\f41\fs16\insrsid16078460 T}{\f2\fs16\insrsid16078460 <declaration>)*
\par }\pard\plain \s23\qj \li1627\ri1526\sb180\sl-200\slmult0\widctlpar\brdrt\brdrs\brdrw10\brsp20\brdrcf16 \brdrl\brdrs\brdrw10\brsp80\brdrcf16 \brdrb\brdrs\brdrw10\brsp20\brdrcf16 \brdrr\brdrs\brdrw10\brsp80\brdrcf16 
\tx1620\faauto\adjustright\rin1526\lin1627\rtlgutter\itap0 \f43\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f0\insrsid16078460 
The translation of a specification is the translation of its header followed by the translation of each of its declarations in the order given.
\par }\pard\plain \s17\qj \fi720\li360\ri0\sb180\widctlpar\tqr\tx7920\faauto\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f41\fs16\insrsid16078460 T(}{\f2\fs16\insrsid16078460 <header> }{\f2\fs16\insrsid16078460 
{\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{\f2\fs16\insrsid16078460  \'93init\'94 <}{\b\f2\fs16\insrsid16078460 y}{\f2\fs16\insrsid16078460  }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 206 \\f "Symbol" \\s 8}{\fldrslt
\f3\fs16}}}{\f2\fs16\insrsid16078460  id> \'93=\'94 <id> \'93:\'94 <}{\b\f2\fs16\insrsid16078460 u}{\f2\fs16\insrsid16078460  }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 206 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{\f2\fs16\insrsid16078460 
 temppart1>\'93&\'94<}{\b\f2\fs16\insrsid16078460 v}{\f2\fs16\insrsid16078460  }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 206 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{\f2\fs16\insrsid16078460  temppart2>)
\par }\pard \s17\qj \fi720\li360\ri0\sb180\widctlpar\tx1800\tqr\tx7920\faauto\adjustright\rin0\lin360\itap0 {\f41\fs16\insrsid16078460 \tab }{\insrsid16078460 {\field{\*\fldinst SYMBOL 222 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}{\f2\fs16\insrsid16078460   }{
\b\f2\fs16\insrsid16078460 typedef enum \{ uC}{\b\f2\fs16\sub\insrsid16078460 1}{\b\f2\fs16\insrsid16078460 v = 0, uC}{\b\f2\fs16\sub\insrsid16078460 2}{\b\f2\fs16\insrsid16078460 v = 1, \'85 uC}{\b\f2\fs16\sub\insrsid16078460 k}{
\b\f2\fs16\insrsid16078460 v = k-1, \} y;}{\f2\fs16\insrsid16078460  
\par }\pard\plain \s23\qj \li1627\ri1526\sb180\sl-200\slmult0\widctlpar\brdrt\brdrs\brdrw10\brsp20\brdrcf16 \brdrl\brdrs\brdrw10\brsp80\brdrcf16 \brdrb\brdrs\brdrw10\brsp20\brdrcf16 \brdrr\brdrs\brdrw10\brsp80\brdrcf16 
\tx1620\faauto\adjustright\rin1526\lin1627\rtlgutter\itap0 \f43\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f0\insrsid16078460 The translation of the specification header is a C-type definition for type name \'93y\'94
 that is an enum type whose constants are the template of the header with the ampersand replaced by  the 3-codes, \'93C}{\f0\sub\insrsid16078460 1}{\f0\insrsid16078460 , C}{\f0\sub\insrsid16078460 2}{\f0\insrsid16078460 , \'85 C}{\f0\sub\insrsid16078460 k
}{\f0\insrsid16078460 \'94, of every message occuring in the declarations that follow.  The values of the constants are set to 0 through k-1.
\par }\pard\plain \s17\ql \fi720\li360\ri0\sb180\widctlpar\tqr\tx7920\faauto\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f41\fs16\insrsid16078460 T}{\f2\fs16\insrsid16078460 (<declaration> }{\f2\fs16\insrsid16078460 
{\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{\f2\fs16\insrsid16078460  \'93type\'94 <}{\b\f2\fs16\insrsid16078460 x}{\f2\fs16\insrsid16078460  }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 206 \\f "Symbol" \\s 8}{\fldrslt
\f3\fs16}}}{\f2\fs16\insrsid16078460  id> = (<data_type>|<struct_type>) )
\par }\pard \s17\ql \li360\ri0\sb180\widctlpar\tx2250\faauto\adjustright\rin0\lin360\itap0 {\f41\fs16\insrsid16078460 \tab }{\insrsid16078460 {\field{\*\fldinst SYMBOL 222 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}{\f2\fs16\insrsid16078460   }{
\b\f2\fs16\insrsid16078460 typedef}{\f2\fs16\insrsid16078460  }{\f41\fs16\insrsid16078460 T}{\f2\fs16\insrsid16078460 (<data_type>|struct_type>) }{\b\f2\fs16\insrsid16078460 x;
\par }\pard\plain \s24\qj \li1627\ri1526\sb180\sl-200\slmult0\widctlpar\brdrt\brdrs\brdrw10\brsp20\brdrcf16 \brdrl\brdrs\brdrw10\brsp80\brdrcf16 \brdrb\brdrs\brdrw10\brsp20\brdrcf16 \brdrr\brdrs\brdrw10\brsp80\brdrcf16 
\tx1620\faauto\adjustright\rin1526\lin1627\rtlgutter\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 The translation of a declaration is a C-typedef for the id denoted by \'93x\'94
 where the type is given by the translation of the declaration\rquote s data type.
\par }\pard\plain \s17\qj \fi720\li360\ri0\sb180\widctlpar\tqr\tx7920\faauto\outlinelevel0\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f41\fs16\insrsid16078460 T}{\f2\fs16\insrsid16078460 (<data_type> }{
\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{\f2\fs16\insrsid16078460  \'93}{\b\f2\fs16\insrsid16078460 x}{\f2\fs16\insrsid16078460  }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 206 \\f "Symbol"
 \\s 8}{\fldrslt\f3\fs16}}}{\f2\fs16\insrsid16078460  float(32|64)|u?int(8|16|32|64)|char\'94) }{\insrsid16078460 {\field{\*\fldinst SYMBOL 222 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}{\f2\fs16\insrsid16078460   }{\b\f2\fs16\insrsid16078460 x
\par }\pard\plain \s24\qj \li1627\ri1526\sb180\sl-200\slmult0\widctlpar\brdrt\brdrs\brdrw10\brsp20\brdrcf16 \brdrl\brdrs\brdrw10\brsp80\brdrcf16 \brdrb\brdrs\brdrw10\brsp20\brdrcf16 \brdrr\brdrs\brdrw10\brsp80\brdrcf16 
\tx1620\faauto\adjustright\rin1526\lin1627\rtlgutter\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 The translation of a scalar data type other than an enum-type is the }{\i\insrsid16078460 celcio}{\insrsid16078460 
 string for the type denoted by \'93x\'94 in the above equation.
\par }\pard\plain \s17\qj \fi720\li360\ri0\sb180\widctlpar\tqr\tx7920\faauto\outlinelevel0\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f41\fs16\insrsid16078460 T}{\f2\fs16\insrsid16078460 (<data_type> }{
\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{\f2\fs16\insrsid16078460  \'93string\'94)  }{\insrsid16078460 {\field{\*\fldinst SYMBOL 222 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}{\f2\fs16\insrsid16078460   
}{\b\f2\fs16\insrsid16078460 char}{\f2\fs16\insrsid16078460  }{\b\f2\fs16\insrsid16078460 *}{\f2\fs16\insrsid16078460 
\par }\pard\plain \s24\qj \li1627\ri1526\sb180\sl-200\slmult0\widctlpar\brdrt\brdrs\brdrw10\brsp20\brdrcf16 \brdrl\brdrs\brdrw10\brsp80\brdrcf16 \brdrb\brdrs\brdrw10\brsp20\brdrcf16 \brdrr\brdrs\brdrw10\brsp80\brdrcf16 
\tx1620\faauto\adjustright\rin1526\lin1627\rtlgutter\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 The translation of a string data type is the type \'93char *\'94.
\par }\pard\plain \s17\qj \fi720\li360\ri0\sb180\widctlpar\tqr\tx7920\faauto\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f41\fs16\insrsid16078460 T}{\f2\fs16\insrsid16078460 (<data_type> }{\f2\fs16\insrsid16078460 
{\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{\f2\fs16\insrsid16078460  \'93list\'94 \'93of\'94 <data_type>)  }{\insrsid16078460 {\field{\*\fldinst SYMBOL 222 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}{\f41\fs16\insrsid16078460  }{
\f2\fs16\insrsid16078460   }{\b\f2\fs16\insrsid16078460 void *}{\f2\fs16\insrsid16078460 
\par }\pard\plain \s24\qj \li1627\ri1526\sb180\sl-200\slmult0\widctlpar\brdrt\brdrs\brdrw10\brsp20\brdrcf16 \brdrl\brdrs\brdrw10\brsp80\brdrcf16 \brdrb\brdrs\brdrw10\brsp20\brdrcf16 \brdrr\brdrs\brdrw10\brsp80\brdrcf16 
\tx1620\faauto\adjustright\rin1526\lin1627\rtlgutter\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 The translation of a list data type is the type \'93void *\'94.
\par }\pard\plain \s17\qj \fi720\li360\ri0\sb180\widctlpar\tqr\tx7920\faauto\outlinelevel0\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f41\fs16\insrsid16078460 T}{\f2\fs16\insrsid16078460 (<data_type> }{
\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{\f2\fs16\insrsid16078460  \'93sequence\'94 \'93of\'94 <data_type>)  }{\insrsid16078460 {\field{\*\fldinst SYMBOL 222 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}{
\f2\fs16\insrsid16078460  }{\f41\fs16\insrsid16078460 T}{\f2\fs16\insrsid16078460 (<data_type>) }{\b\f2\fs16\insrsid16078460 *}{\f2\fs16\insrsid16078460 
\par }\pard\plain \s24\qj \li1627\ri1526\sb180\sl-200\slmult0\widctlpar\brdrt\brdrs\brdrw10\brsp20\brdrcf16 \brdrl\brdrs\brdrw10\brsp80\brdrcf16 \brdrb\brdrs\brdrw10\brsp20\brdrcf16 \brdrr\brdrs\brdrw10\brsp80\brdrcf16 
\tx1620\faauto\adjustright\rin1526\lin1627\rtlgutter\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 The translation of a sequence data type is a pointer to the C-type that is the translation of the array\rquote 
s base data type.
\par }\pard\plain \s17\qj \fi720\li360\ri0\sb180\widctlpar\tqr\tx7920\faauto\outlinelevel0\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f41\fs16\insrsid16078460 T}{\f2\fs16\insrsid16078460 (<data_type> }{
\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{\f2\fs16\insrsid16078460  \'93array\'94 \'93[\'94 <id> \'93]\'94 \'93of\'94 <data_type>)  }{\insrsid16078460 {\field{\*\fldinst SYMBOL 222 \\f "Symbol"
 \\s 10}{\fldrslt\f3\fs20}}}{\f2\fs16\insrsid16078460  }{\f41\fs16\insrsid16078460 T}{\f2\fs16\insrsid16078460 (<data_type>) }{\b\f2\fs16\insrsid16078460 *}{\f2\fs16\insrsid16078460 
\par }\pard\plain \s24\qj \li1627\ri1526\sb180\sl-200\slmult0\widctlpar\brdrt\brdrs\brdrw10\brsp20\brdrcf16 \brdrl\brdrs\brdrw10\brsp80\brdrcf16 \brdrb\brdrs\brdrw10\brsp20\brdrcf16 \brdrr\brdrs\brdrw10\brsp80\brdrcf16 
\tx1620\faauto\adjustright\rin1526\lin1627\rtlgutter\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 The translation of an array data type is a pointer to the C-type that is the translation of the array\rquote s 
base data type.
\par }\pard\plain \s17\qj \fi720\li360\ri0\sb120\widctlpar\tqr\tx7920\faauto\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f41\fs16\insrsid16078460 
\par }\pard \s17\qj \fi720\li360\ri0\sb100\widctlpar\tqr\tx7920\faauto\adjustright\rin0\lin360\itap0 {\f41\fs16\insrsid16078460 T}{\f2\fs16\insrsid16078460 (<data_type> }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt
\f3\fs16}}}{\f2\fs16\insrsid16078460  \'93enum\'94 \'93\{\'94 ( <enum_con> \'93,\'94 )* <enum_con> \'93\}\'94) 
\par }\pard \s17\qj \li1080\ri0\sb100\widctlpar\tx2160\faauto\outlinelevel0\adjustright\rin0\lin1080\itap0 {\b\f2\fs16\insrsid16078460 \tab }{\insrsid16078460 {\field{\*\fldinst SYMBOL 222 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}{\f2\fs16\insrsid16078460   }{
\b\f2\fs16\insrsid16078460 enum \{ }{\f2\fs16\insrsid16078460 T(<enum_con>) , )* T(<enum_con>) }{\b\f2\fs16\insrsid16078460 \}}{\f41\fs16\insrsid16078460 
\par }\pard \s17\qj \fi450\li1080\ri0\sb100\widctlpar\tqr\tx7920\faauto\adjustright\rin0\lin1080\itap0 {\f41\fs16\insrsid16078460 T}{\f2\fs16\insrsid16078460 (<enum_con> }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt
\f3\fs16}}}{\f2\fs16\insrsid16078460  <}{\b\f2\fs16\insrsid16078460 x}{\f2\fs16\insrsid16078460  }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 206 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{\f2\fs16\insrsid16078460  id> \'93(\'94<}{
\b\f2\fs16\insrsid16078460 a}{\f2\fs16\insrsid16078460  }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 206 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{\f2\fs16\insrsid16078460  1_code>\'93)\'94)  }{\insrsid16078460 {\field{\*\fldinst SYMBOL 222 \\f 
"Symbol" \\s 10}{\fldrslt\f3\fs20}}}{\f2\fs16\insrsid16078460   }{\b\f2\fs16\insrsid16078460 x = \lquote a\rquote }{\f2\fs16\insrsid16078460 
\par }\pard\plain \s24\qj \li1627\ri1526\sb100\sl-200\slmult0\widctlpar\brdrt\brdrs\brdrw10\brsp20\brdrcf16 \brdrl\brdrs\brdrw10\brsp80\brdrcf16 \brdrb\brdrs\brdrw10\brsp20\brdrcf16 \brdrr\brdrs\brdrw10\brsp80\brdrcf16 
\tx1620\faauto\adjustright\rin1526\lin1627\rtlgutter\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 The translation of an enum data type is a C-enum type where the enum constants are as in the }{\i\insrsid16078460 celcio}{
\insrsid16078460  type, and where each constant is set to the value of its 1-code character.
\par }\pard\plain \s17\qj \fi1080\li360\ri0\sb100\widctlpar\tqr\tx7920\faauto\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f41\fs16\insrsid16078460 T}{\f2\fs16\insrsid16078460 (<struct_type:MESG> }{
\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{\f2\fs16\insrsid16078460  \'93struct\'94 \'93\{\'94 <field_dec> + \'93\}\'94)
\par }\pard \s17\qj \fi720\li360\ri0\sb100\widctlpar\tx2160\tqr\tx7920\faauto\outlinelevel0\adjustright\rin0\lin360\itap0 {\f2\fs16\insrsid16078460 \tab }{\insrsid16078460 {\field{\*\fldinst SYMBOL 222 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}{
\f2\fs16\insrsid16078460   }{\b\f2\fs16\insrsid16078460 struct \{}{\f2\fs16\insrsid16078460  }{\f41\fs16\insrsid16078460 F}{\f2\fs16\insrsid16078460 (<header>) }{\f41\fs16\insrsid16078460 T}{\f2\fs16\insrsid16078460 (<field_dec>) + }{
\b\f2\fs16\insrsid16078460 \}
\par }\pard \s17\qj \fi1080\li360\ri0\sb100\widctlpar\tqr\tx7920\faauto\adjustright\rin0\lin360\itap0 {\f41\fs16\insrsid16078460 T}{\f2\fs16\insrsid16078460 (<struct_type:TYPE> }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol"
 \\s 8}{\fldrslt\f3\fs16}}}{\f2\fs16\insrsid16078460  \'93struct\'94 \'93\{\'94 <field_dec> + \'93\}\'94)
\par }\pard \s17\qj \fi720\li360\ri0\sb100\widctlpar\tx2160\faauto\outlinelevel0\adjustright\rin0\lin360\itap0 {\f2\fs16\insrsid16078460 \tab }{\insrsid16078460 {\field{\*\fldinst SYMBOL 222 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}{\f2\fs16\insrsid16078460   }
{\b\f2\fs16\insrsid16078460 struct \{}{\f2\fs16\insrsid16078460  }{\f41\fs16\insrsid16078460 T}{\f2\fs16\insrsid16078460 (<field_dec>) + }{\b\f2\fs16\insrsid16078460 \}}{\f2\fs16\insrsid16078460 
\par }\pard\plain \s24\qj \li1627\ri1526\sb100\sl-200\slmult0\widctlpar\brdrt\brdrs\brdrw10\brsp20\brdrcf16 \brdrl\brdrs\brdrw10\brsp80\brdrcf16 \brdrb\brdrs\brdrw10\brsp20\brdrcf16 \brdrr\brdrs\brdrw10\brsp80\brdrcf16 
\tx1620\faauto\adjustright\rin1526\lin1627\rtlgutter\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 
The translation of a struct data type is a C-struct where the field declarations are the translations of the fields of the }{\i\insrsid16078460 celcio}{\insrsid16078460  specification.  In the case that the struct 
is a message, a field definition for the type of the message is inserted as the first field.  This is captured formally as the }{\f41\fs16\insrsid16078460 F}{\insrsid16078460 -translation of the header of the file.
\par }\pard\plain \s17\qj \fi720\li360\ri0\sb100\widctlpar\tqr\tx7920\faauto\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f41\fs16\insrsid16078460 F(}{\f2\fs16\insrsid16078460 <header> }{\f2\fs16\insrsid16078460 
{\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{\f2\fs16\insrsid16078460  \'93init\'94 <}{\b\f2\fs16\insrsid16078460 y}{\f2\fs16\insrsid16078460  }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 206 \\f "Symbol" \\s 8}{\fldrslt
\f3\fs16}}}{\f2\fs16\insrsid16078460  id> \'93=\'94 <}{\b\f2\fs16\insrsid16078460 x}{\f2\fs16\insrsid16078460  }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 206 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{\f2\fs16\insrsid16078460  id> \'93:\'94
 <template>)  }{\insrsid16078460 {\field{\*\fldinst SYMBOL 222 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}{\f2\fs16\insrsid16078460   }{\b\f2\fs16\insrsid16078460 y x;}{\f2\fs16\insrsid16078460  
\par }\pard\plain \s24\qj \li1627\ri1526\sb100\sl-200\slmult0\widctlpar\brdrt\brdrs\brdrw10\brsp20\brdrcf16 \brdrl\brdrs\brdrw10\brsp80\brdrcf16 \brdrb\brdrs\brdrw10\brsp20\brdrcf16 \brdrr\brdrs\brdrw10\brsp80\brdrcf16 
\tx1620\faauto\adjustright\rin1526\lin1627\rtlgutter\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 The }{\f41\fs16\insrsid16078460 F}{\insrsid16078460 
-translation of a specification header is a field declaration for field \'93x\'94 of type \'93y\'94.
\par }\pard\plain \s17\qj \fi720\li360\ri0\sb100\widctlpar\tqr\tx7920\faauto\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f41\fs16\insrsid16078460 T}{\f2\fs16\insrsid16078460 (<field_dec> }{\f2\fs16\insrsid16078460 
{\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{\f2\fs16\insrsid16078460  <}{\b\f2\fs16\insrsid16078460 x}{\f2\fs16\insrsid16078460  }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 206 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{
\f2\fs16\insrsid16078460  id> }{\b\f2\fs16\insrsid16078460 :}{\f2\fs16\insrsid16078460  <data_type>)  }{\insrsid16078460 {\field{\*\fldinst SYMBOL 222 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}{\f2\fs16\insrsid16078460   }{\f41\fs16\insrsid16078460 T}{
\f2\fs16\insrsid16078460 (<data_type>) }{\b\f2\fs16\insrsid16078460 x; 
\par }\pard\plain \s24\qj \li1627\ri1526\sb100\sl-200\slmult0\widctlpar\brdrt\brdrs\brdrw10\brsp20\brdrcf16 \brdrl\brdrs\brdrw10\brsp80\brdrcf16 \brdrb\brdrs\brdrw10\brsp20\brdrcf16 \brdrr\brdrs\brdrw10\brsp80\brdrcf16 
\tx1620\faauto\adjustright\rin1526\lin1627\rtlgutter\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 The translation of a field declaration for \'93x\'94 is a C field-declaration for \'93x\'94
 where the type is the translation of the field\rquote s data type.
\par }\pard\plain \s17\qj \fi720\li360\ri0\sb100\widctlpar\tqr\tx7920\faauto\outlinelevel0\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f41\fs16\insrsid16078460 T}{\f2\fs16\insrsid16078460 (}{
\b\f2\fs16\insrsid16078460 <}{\f2\fs16\insrsid16078460 data_type> }{\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 172 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{\f2\fs16\insrsid16078460  <}{\b\f2\fs16\insrsid16078460 x}{\f2\fs16\insrsid16078460  }{
\f2\fs16\insrsid16078460 {\field{\*\fldinst SYMBOL 206 \\f "Symbol" \\s 8}{\fldrslt\f3\fs16}}}{\f2\fs16\insrsid16078460  id>)  }{\insrsid16078460 {\field{\*\fldinst SYMBOL 222 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}{\f2\fs16\insrsid16078460   }{
\b\f2\fs16\insrsid16078460 x
\par }\pard\plain \s24\qj \li1627\ri1526\sb100\sl-200\slmult0\widctlpar\brdrt\brdrs\brdrw10\brsp20\brdrcf16 \brdrl\brdrs\brdrw10\brsp80\brdrcf16 \brdrb\brdrs\brdrw10\brsp20\brdrcf16 \brdrr\brdrs\brdrw10\brsp80\brdrcf16 
\tx1620\faauto\adjustright\rin1526\lin1627\rtlgutter\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 The translation of type name is the type\rquote s name \'93x\'94.
\par }\pard\plain \s17\qj \fi-360\li360\ri0\sb320\widctlpar\faauto\outlinelevel0\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b\insrsid16078460 4. Translation to I/O Routines:
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 In response to a specification, say \'93}{\f2\fs18\insrsid16078460 fragment}{\insrsid16078460 \'94, }{\i\insrsid16078460 celcio}{\insrsid16078460 
 will produce two files \endash  \'93}{\f2\fs18\insrsid16078460 fragment.h}{\insrsid16078460 \'94 and \'93}{\f2\fs18\insrsid16078460 fragment.c}{\insrsid16078460 \'94, where the file with the \'93.c\'94
 extension contains C code that will read and write every declared message in both ASCII and binary formats.  The nature of this code is not of any concern to the }{\i\insrsid16078460 celcio}{\insrsid16078460  user other than that the
y understand that it must be compiled and linked in to any program that will use the defined data interface.  The user should note carefully that two different .c files produced by }{\i\insrsid16078460 celcio}{\insrsid16078460 
 may not be used simultaneously \endash  if a program reading and writing the union of the messages in the two }{\i\insrsid16078460 celcio}{\insrsid16078460 
 specifications is desired, then one should merge the two specification files prior to compilation into a single .h and .c file.
\par The externally visible routines in the \'93.c\'94 file always present the same interface/abstraction to the user and are declared at the end of the \'93.h\'94
 file that should be included in the users program.  This interface consists of 6 routines for reading and writing messages, 7 routines for walking and manipulating lists, and 2 concerning sequences.
\par The IO primitives center on use of  \'93CelcioUnit\'94
s that maintain the state of a series of message reads or writes to a given file or IO port.  One can establish CelcioUnits for reading and writing, perform a series of reads or writes on a CelcioUnit cor
rectly established for the given mode of operation, query the type of any message, and destroy a CelcioUnit when it is no longer of use.  Each primitive is listed below with a description of its arguments and action.
\par {\pntext\pard\plain\s17 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb120\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls12\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls12\adjustright\rin0\lin720\itap0 {\b\f2\fs18\insrsid16078460 CelcioUnit *CreateCelcioReader(FILE *ifile, int buffer_size);
\par }\pard \s17\qj \li720\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin720\itap0 {\insrsid16078460 Prepare to read input from the given \'93stdio.h\'94 FILE \'93ifile\'94
.  This file should already be opened for reading but may have its read cursor positioned anywhere within the file so long as a legitimate stream of celcio messages begins at the current position.  The returned \'93CelcioUnit\'94
 object keeps track of the current state of the }{\i\insrsid16078460 celcio}{\insrsid16078460  read sequence that will ensue on the file.  The parameter \'93buffer_size\'94 gives the number of bytes to initially allocate for the storage of successive
 messages to be read via the input unit.  If set to 0, }{\i\insrsid16078460 celcio}{\insrsid16078460  uses its default size.
\par {\pntext\pard\plain\s17 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb120\widctlpar{\*\pn \pnlvlblt\ilvl0\ls14\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}\faauto\ls14\adjustright\rin0\lin720\itap0 {
\b\f2\fs18\insrsid16078460 CelcioUnit *CreateCelcioWriter(FILE *ofile, int binary);
\par }\pard \s17\qj \li720\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin720\itap0 {\insrsid16078460 Prepare to write input from the given \'93stdio.h\'94 FILE \'93ofile\'94.  This file should already be opened for writing.  The returned \'93CelcioUnit\'94
 object keeps track of the current state of the }{\i\insrsid16078460 celcio}{\insrsid16078460  write sequence that will ensue on the file.  If the parameter \'93binary\'94 is non-zero then celcio will write binary message, ot
herwise it will write ASCII messages.
\par {\pntext\pard\plain\s17 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb120\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls13\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls13\adjustright\rin0\lin720\itap0 {\b\f2\fs18\insrsid16078460 void *ReadCelcioMesg(CelcioUnit *input_unit);
\par }\pard \s17\qj \li720\ri0\sb120\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\adjustright\rin0\lin720\itap0 {\insrsid16078460 Read the next message from the stream coded in the created \'93CelcioUnit\'94
 input_unit.  Return NULL if at the end of file, or a pointer to the next message if the read is successful.   The memory in which the message is placed is owned by }{\i\insrsid16078460 celcio}{\insrsid16078460 
 and will be reclaimed when the next read request is made of the input unit.}{\b\f2\fs18\insrsid16078460 
\par {\pntext\pard\plain\s17 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb120\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls13\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls13\adjustright\rin0\lin720\itap0 {\b\f2\fs18\insrsid16078460 <Message Enum Type> TypeOfCelcioMesg(void *mesg);
\par }\pard \s17\qj \li720\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin720\itap0 {\insrsid16078460 Return the enum value encoding the type of the celcio message pointed at by \'93mesg\'94.  The return type is as given in the \'93init\'94
 line of the defining specification.  Once the type of a message is known one may caste it to the appropriate type for the message.}{\b\f2\fs18\insrsid16078460 
\par {\pntext\pard\plain\s17 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb120\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls12\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls12\adjustright\rin0\lin720\itap0 {\b\f2\fs18\insrsid16078460 void WriteCelcioMesg(CelcioUnit *output_unit, void *message);
\par }\pard \s17\qj \li720\ri0\sb120\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\adjustright\rin0\lin720\itap0 {\insrsid16078460 Write the }{\i\insrsid16078460 celcio }{\insrsid16078460 message pointed at by \'93message\'94 to the file \'93
ofile\'94.  This file is expected to be open for writing.}{\b\f2\fs18\insrsid16078460 
\par {\pntext\pard\plain\s17 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb120\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls12\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls12\adjustright\rin0\lin720\itap0 {\b\f2\fs18\insrsid16078460 void DestroyCelcioUnit(CelcioUnit *unit);
\par }\pard \s17\qj \li720\ri0\sb120\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\adjustright\rin0\lin720\itap0 {\insrsid16078460 Reclaim the memory associated with the }{\i\insrsid16078460 celcio}{\insrsid16078460  unit \'93unit\'94
 and release it.  The \'93stdio.h\'94 FILE associated with this port is not closed, the user is expected to do so.
\par }\pard \s17\qj \li360\ri0\sb240\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 
Based, on the celcio specification of Figure 1, we give in Figure 3 a small example of a program that reads the messages on the file \'93SampleInput\'94 and writes all those that are of type \'93FRG\'94
 onto the standard output.  While the program is complete, it does not engage in the usual checks of call results in order to keep the example small.
\par }\pard \s17\qj \li0\ri0\sb120\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\adjustright\rin0\lin0\itap0 {\insrsid16078460 
\par 
\par }\pard \s17\qj \li2520\ri0\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\adjustright\rin0\lin2520\itap0 {\f2\fs18\insrsid16078460 #include <stdio.h>
\par #include \'93fragment.h\'94
\par 
\par int main()
\par \{ FILE *file;
\par   }{\b\f2\fs18\insrsid16078460 CelcioUnit}{\f2\fs18\insrsid16078460  *input, *output;
\par   void *mesg;
\par 
\par   ifile  = fopen(\'93SampleInput\'94,\'94r\'94);
\par   input  = }{\b\f2\fs18\insrsid16078460 CreateCelcioReader}{\f2\fs18\insrsid16078460 (ifile,100000);
\par   output = }{\b\f2\fs18\insrsid16078460 CreateCelcioWriter}{\f2\fs18\insrsid16078460 (stdout,0);
\par }\pard \s17\ql \li2520\ri0\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\adjustright\rin0\lin2520\itap0 {\f2\fs18\insrsid16078460   while ((mesg = }{\b\f2\fs18\insrsid16078460 ReadCelcioMesg}{\f2\fs18\insrsid16078460 (input)) != NULL)
\par }\pard \s17\qj \li2520\ri0\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\adjustright\rin0\lin2520\itap0 {\f2\fs18\insrsid16078460     if (}{\b\f2\fs18\insrsid16078460 TypeOfCelcioMesg}{\f2\fs18\insrsid16078460 (mesg) == }{
\i\f2\fs18\insrsid16078460 AS_FRG_MESG}{\f2\fs18\insrsid16078460 )
\par       }{\b\f2\fs18\insrsid16078460 WriteCelcioMesg}{\f2\fs18\insrsid16078460 (output,mesg);
\par   }{\b\f2\fs18\insrsid16078460 DestroyCelcioUnit}{\f2\fs18\insrsid16078460 (input);
\par   }{\b\f2\fs18\insrsid16078460 DestroyCelcioUnit}{\f2\fs18\insrsid16078460 (output);
\par }{\b\f2\fs18\insrsid16078460   }{\f2\fs18\insrsid16078460 fclose(ifile);
\par   exit (0);
\par \}
\par 
\par }\pard \s17\ql \li1440\ri0\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\outlinelevel0\adjustright\rin0\lin1440\itap0 {\b\fs22\insrsid16078460                     }{\b\fs22\ul\insrsid16078460 Figure 3:}{\insrsid16078460   Sample usage of }{
\i\insrsid16078460 celcio}{\insrsid16078460 \rquote s IO routines.
\par }\pard \s17\ql \li1440\ri0\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\adjustright\rin0\lin1440\itap0 {\insrsid16078460 
\par 
\par 
\par }\pard \s17\qj \li360\ri0\sb180\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 A }{\i\insrsid16078460 celcio}{\insrsid16078460  list is mapped to an opaque pointer (i.e. void *) to ins
ure that user\rquote s manipulate the data abstraction through the seven routines or methods below.
\par {\pntext\pard\plain\s17 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb160\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls12\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls12\adjustright\rin0\lin720\itap0 {\b\f2\fs18\insrsid16078460 CelcioWalker *StartCelcioWalk(void *list, CelcioUnit *unit);
\par }\pard \s17\qj \li720\ri0\sb160\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\adjustright\rin0\lin720\itap0 {\insrsid16078460 All traversals or modifications of a list begin by calling \'93StartCelcioWalk\'94 on the list in questio
n, or NULL if a new empty list is desired.  The primitive returns a pointer to a CelcioWalker object that maintains the current state of the list traversal.  The traversal cursor maintained by a CelcioWalker is to a position that is always between element
s of the list.  Initially, the cursor is before the rightmost/first element of the list.  If \'93unit\'94
 is not NULL, then the space management for adds and deletes for this walk will take place in the memory space managed by the given unit.  In this event it should be the case that the list is part of a message read by this unit or is NULL.  If \'93unit
\'94 is NULL, then list elements are malloc\rquote d and free\rquote d in response to add and delete requests.  A list may have only one active walker associated with it at any time.}{\b\f2\fs18\insrsid16078460 
\par {\pntext\pard\plain\s17 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb160\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls12\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls12\adjustright\rin0\lin720\itap0 {\b\f2\fs18\insrsid16078460 int   AdvanceCelcioWalk(CelcioWalker *walk, int right);
\par }\pard \s17\qj \li720\ri0\sb160\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\adjustright\rin0\lin720\itap0 {\insrsid16078460 Each call to \'93AdvanceCelcioWalk\'94
 with a given walker moves its cursor one position to the left or right depending on whether the parameter \'93right\'94 is non-zero or not.  If the cursor is already at 
the end of the list in the requested direction, then the call has no effect but returns a non-zero value, effectively providing the user with a test for whether they are at the left or right end of the list.}{\b\f2\fs18\insrsid16078460 
\par {\pntext\pard\plain\s17 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb160\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls12\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls12\adjustright\rin0\lin720\itap0 {\b\f2\fs18\insrsid16078460 void *GetCelcioWalkObject(CelcioWalker *walk, int right);
\par }\pard \s17\qj \li720\ri0\sb160\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\adjustright\rin0\lin720\itap0 {\insrsid16078460 A call to \'93GetCelcioWalkObject\'94
 returns a pointer to the object held by the element immediately to the right or left of the current position of \'93walk\'94 depending on whether the parameter \'93right\'94 is non-zero or not.   It is the responsibility of
 the user to caste the opaque pointer returned to a pointer to an object of the appropriate type for the list being walked.  If there is no object in the given direction from the cursor, then NULL is returned.}{\b\f2\fs18\insrsid16078460 
\par {\pntext\pard\plain\s17 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb160\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls12\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls12\adjustright\rin0\lin720\itap0 {\b\f2\fs18\insrsid16078460 int  AddToCelcioWalk(CelcioWalker *walk, void *obj, int size);
\par }\pard \s17\qj \li720\ri0\sb160\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\adjustright\rin0\lin720\itap0 {\insrsid16078460 Insert at the current cursor point a new element to the list where \'93obj\'94
 is a pointer to the base element value to be inserted and \'93size\'94 is the size of the base element in bytes.  A copy of th
e base element is inserted into the list, thus the base element passed as an argument does not need to persist after the call.  The routine returns a non-zero value if it was unable to allocate space for the new element, and in this event has no effect on
 the list.
\par {\pntext\pard\plain\s17 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb160\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls12\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls12\adjustright\rin0\lin720\itap0 {\b\f2\fs18\insrsid16078460 int   DelFromCelcioWalk(CelcioWalker *walk, int right);
\par }\pard \s17\qj \li720\ri0\sb160\widctlpar\faauto\adjustright\rin0\lin720\itap0 {\insrsid16078460 Delete the element immediately to the right or left of the cursor depending on whether \'93right\'94
 is non-zero or not, respectively.  If the designated element does not exist then the routine
 has no effect save that it returns a non-zero value indicating this condition.  One must be careful to free any memory referred to by the element being deleted in order to avoid a memory leak. 
\par {\pntext\pard\plain\s17 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \li360\ri0\sb160\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls15\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls15\adjustright\rin0\lin360\itap0 {\b\f2\fs18\insrsid16078460 void *EndCelcioWalk(CelcioWalker *walk);
\par }\pard \s17\qj \li720\ri0\sb160\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\adjustright\rin0\lin720\itap0 {\insrsid16078460 Terminate the traversal of the list being manipulated by the walker \'93walk\'94
.  The walker object is destroyed and its storage freed.  A pointer to the list object is returned.  If the list has been modified by additions or deletions, then it is imperative that any references
 to the list object be set to this new reference as the underlying list has changed.
\par {\pntext\pard\plain\s17 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \li360\ri0\sb160\widctlpar\jclisttab\tx360{\*\pn \pnlvlblt\ilvl0\ls15\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls15\adjustright\rin0\lin360\itap0 {\b\f2\fs18\insrsid16078460 long  CelcioListLength(void *list);
\par }\pard \s17\qj \li720\ri0\sb160\widctlpar\faauto\adjustright\rin0\lin720\itap0 {\insrsid16078460 Return the length of the celcio list pointed at by \'93list\'94.  Note that this primtive takes time proportional to the list.
\par }\pard \s17\qj \li360\ri0\sb180\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 We now give an extended example of the use of these primtives in Figure 4 using the \'93Fragment\'94
 message example of Figure 1.   The example takes the form of a routine \'93WalkExamples\'94 that is passed a Fragment structure as an argument.  It is immediately checked if this is an \'93SFG\'94 message and if not then the routine\line 
\par }\pard \s17\qj \li720\ri0\widctlpar\faauto\adjustright\rin0\lin720\itap0 {\f2\fs18\insrsid16078460 
\par void WalkExamples(Fragment *fmsg, CelcioUnit *input)
\par \{ ScreenMatch *scm, sitem;
\par   CelcioWalk  *walk;
\par   int          i;
\par 
\par   if (}{\b\f2\fs18\insrsid16078460 TypeOfCelcioMesg}{\f2\fs18\insrsid16078460 (fmsg) != }{\i\f2\fs18\insrsid16078460 AS_SFG_MESG}{\f2\fs18\insrsid16078460 ) return;
\par 
\par }{\lang1024\langfe1024\noproof\insrsid16078460 {\shp{\*\shpinst\shpleft-666\shptop122\shpright630\shpbottom986\shpfhdr0\shpbxcolumn\shpbxignore\shpbypara\shpbyignore\shpwr3\shpwrk0\shpfblwtxt0\shpz0\shplid1026
{\sp{\sn shapeType}{\sv 202}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn lTxid}{\sv 65536}}{\sp{\sn hspNext}{\sv 1026}}{\sp{\sn fLayoutInCell}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 0}}{\shptxt \pard\plain 
\s26\qc \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 Ordinary left-to-right traversal.
\par }}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8192\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s26\qc \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 
Ordinary left-to-right traversal.
\par }}\dpx-666\dpy122\dpxsize1296\dpysize864\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0}}}}{\f2\fs18\insrsid16078460   printf(\'93\\nScreen Matches\\n\'94);
\par   walk = }{\b\f2\fs18\insrsid16078460 StartCelcioWalk}{\f2\fs18\insrsid16078460 (fmsg->screen,NULL);
\par   while ((scm = (ScreenMatch *) }{\b\f2\fs18\insrsid16078460 GetCelcioWalkObject}{\f2\fs18\insrsid16078460 (walk,1)) != NULL)
\par     \{ printf(\'93  %d[%d,%d]\\n\'94,scm->what,scm->beg,scm->end);
\par       }{\b\f2\fs18\insrsid16078460 AdvanceCelcioWalk}{\f2\fs18\insrsid16078460 (walk,1);
\par     \}
\par }\pard \s17\qj \li720\ri0\widctlpar\faauto\outlinelevel0\adjustright\rin0\lin720\itap0 {\f2\fs18\insrsid16078460   }{\b\f2\fs18\insrsid16078460 EndCelcioWalk}{\f2\fs18\insrsid16078460 (walk);
\par }\pard \s17\qj \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 {\f2\fs18\insrsid16078460 
\par }\pard \s17\qj \li720\ri0\widctlpar\faauto\adjustright\rin0\lin720\itap0 {\lang1024\langfe1024\noproof\insrsid16078460 
{\shp{\*\shpinst\shpleft-666\shptop75\shpright630\shpbottom939\shpfhdr0\shpbxcolumn\shpbxignore\shpbypara\shpbyignore\shpwr3\shpwrk0\shpfblwtxt0\shpz1\shplid1027{\sp{\sn shapeType}{\sv 202}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}
{\sp{\sn lTxid}{\sv 131072}}{\sp{\sn hspNext}{\sv 1027}}{\sp{\sn fLayoutInCell}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 0}}{\shptxt \pard\plain \s26\qc \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 
\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 Adding 3 elements at the front.
\par }}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8193\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s26\qc \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 
Adding 3 elements at the front.
\par }}\dpx-666\dpy75\dpxsize1296\dpysize864\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0}}}}{\f2\fs18\insrsid16078460   walk = }{\b\f2\fs18\insrsid16078460 
StartCelcioWalk}{\f2\fs18\insrsid16078460 (fmsg->screen,input);
\par   for (i = 0; i < 3; i++)
\par     \{ sitem.what = 22;
\par       sitem.beg  = 50*i;
\par       sitem.end  = sitem.beg + 50;
\par       }{\b\f2\fs18\insrsid16078460 AddToCelcioWalk}{\f2\fs18\insrsid16078460 (walk,(void *) (&sitem),sizeof(ScreenMatch));
\par       }{\b\f2\fs18\insrsid16078460 AdvanceWalk}{\f2\fs18\insrsid16078460 (walk,1); /* if want Queue list build, else get Stack build */
\par     \}
\par   fmsg->screen = }{\b\f2\fs18\insrsid16078460 EndCelcioWalk}{\f2\fs18\insrsid16078460 (walk);
\par 
\par }{\lang1024\langfe1024\noproof\insrsid16078460 {\shp{\*\shpinst\shpleft-666\shptop52\shpright630\shpbottom916\shpfhdr0\shpbxcolumn\shpbxignore\shpbypara\shpbyignore\shpwr3\shpwrk0\shpfblwtxt0\shpz2\shplid1028
{\sp{\sn shapeType}{\sv 202}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn lTxid}{\sv 196608}}{\sp{\sn hspNext}{\sv 1028}}{\sp{\sn fLayoutInCell}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 0}}{\shptxt \pard\plain 
\s26\qc \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 Deleting every other element.
\par }}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8194\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s26\qc \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 Deleting every other element.

\par }}\dpx-666\dpy52\dpxsize1296\dpysize864\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0}}}}{\f2\fs18\insrsid16078460   walk = }{\b\f2\fs18\insrsid16078460 
StartCelcioWalk}{\f2\fs18\insrsid16078460 (fmsg->screen,input);
\par   for (i = 0; (scm = (ScreenMatch *) }{\b\f2\fs18\insrsid16078460 GetCelcioWalkObject}{\f2\fs18\insrsid16078460 (walk,1)) != NULL; i++)
\par     if (i%2)
\par       }{\b\f2\fs18\insrsid16078460 DelFromCelcioWalk}{\f2\fs18\insrsid16078460 (walk,1);
\par     else
\par       }{\b\f2\fs18\insrsid16078460 AdvanceCelcioWalk}{\f2\fs18\insrsid16078460 (walk,1);
\par   fmsg->screen = }{\b\f2\fs18\insrsid16078460 EndCelcioWalk}{\f2\fs18\insrsid16078460 (walk);
\par \}
\par }\pard \s17\qj \li2520\ri0\widctlpar\faauto\adjustright\rin0\lin2520\itap0 {\f2\fs18\insrsid16078460 
\par }\pard \s17\ql \li1440\ri0\widctlpar\faauto\outlinelevel0\adjustright\rin0\lin1440\itap0 {\b\fs22\insrsid16078460                     }{\b\fs22\ul\insrsid16078460 Figure 4:}{\insrsid16078460   Sample usage of }{\i\insrsid16078460 celcio}{\insrsid16078460 
\rquote s list routines.
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 
\par }\pard \s17\qj \li360\ri0\sb180\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\insrsid16078460 returns immediately.  Otherwise the message has a \'93screen\'94
 list and the following manipulations occur.  First the list is walked in order and the contents of each Screen Message record printed on a line of the standard output.  In the next code block 3 Scr
eenMatch elements are inserted at the front of the list.  Note carefully that if the call to \'93AdvanceWalk\'94 is present then the result is \'9322[0,50] 22[50,100] 22[100,150] <original list>\'94, whereas if it is left off then the list is \'93
22[100,150] 22[50,100] 22[0,50] <original list>\'94.  In the final traversal, every other element of the list is deleted from the list.
\par One must be careful to appreciate the memory management issues surrounding the AddToCelcioWalk and DelFromCelcioWalk routines in order to avoid cre
ating memory leaks in their application.  Each input CelcioUnit maintains its own memory space in which it allocates the messages it returns.  At other times a user may use C stdlib\rquote 
s malloc and free to build messages that they wish to output.  Deleted cells must be reclaimed by the appropriate manager.  Added cells can be allocated by either manager, but if malloc\rquote d then these cells must later be free\rquote 
d if a leak is to be avoided, and if allocated in the read managers space then these cells cannot later be free\rquote 
d if a core dump is to be avoided.  Generally we suggest two templates: (1) for a read message that is to be modified before being output, use the unit\rquote 
s manager, and otherwise (2) construct a message using malloc and free, including lists which are 
initially NULL and built up by adds.  For template (2), constructed lists must be freed by deleting every element when it is time to free the overall message.
\par A }{\i\insrsid16078460 celcio}{\insrsid16078460  sequence is equivalent to a C-array for the object save that one gets the length of the sequence (tucked away in a long integer prefacing the array) by calling \'93CelcioSeqLength\'94
.  The two other necessary primitives are \'93CreateCelcioSequence\'94  and \'93DestroyCelcioSequence\'94, needed when on is building a message from scratch in memory.
\par {\pntext\pard\plain\s17 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb180\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls12\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls12\adjustright\rin0\lin720\itap0 {\b\f2\fs18\insrsid16078460 long  CelcioSeqLength(void *seq);
\par }\pard \s17\qj \li720\ri0\sb180\widctlpar\faauto\adjustright\rin0\lin720\itap0 {\insrsid16078460 Return the length of the celcio sequence pointed at by \'93seq\'94.  Note that you must coerce the type of the sequence pointer to \'93void *\'94
 for the call.
\par {\pntext\pard\plain\s17 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb180\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls16\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls16\adjustright\rin0\lin720\itap0 {\b\f2\fs18\insrsid16078460 void *CreateCelcioSequence(long length, int size);
\par }\pard \s17\qj \li720\ri0\sb180\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\faauto\outlinelevel0\adjustright\rin0\lin720\itap0 {\insrsid16078460 Allocate a sequence object of  \'93length\'94 elements of \'93size\'94
 bytes each.  If space is not availae, NULL is returned, otherwise a pointer to the array portion is returned, wherein one may then assign the elements.
\par {\pntext\pard\plain\s17 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s17\qj \fi-360\li720\ri0\sb180\widctlpar\jclisttab\tx720{\*\pn \pnlvlblt\ilvl0\ls16\pnrnot0\pnf3\pnstart1\pnindent360\pnsp120\pnhang {\pntxtb \'b7}}
\faauto\ls16\adjustright\rin0\lin720\itap0 {\b\f2\fs18\insrsid16078460 void DestroyCelcioSequence(void *seq);
\par }\pard \s17\qj \li720\ri0\sb180\widctlpar\faauto\outlinelevel0\adjustright\rin0\lin720\itap0 {\insrsid16078460 Free the memory of the sequence object pointed at by \'93seq\'94.  This object must either have been read by \line \'93ReadCelcioMesg\'94
 or created by \'93CreateCelcioSequence\'94.
\par }\pard \s17\qj \fi-360\li360\ri0\sb320\widctlpar\faauto\outlinelevel0\adjustright\rin0\lin360\itap0 {\b\insrsid16078460 5. ASCII Format Conventions:
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\faauto\outlinelevel0\adjustright\rin0\lin360\itap0 {\insrsid16078460 The design of the ASCII formating conventions for }{\i\insrsid16078460 celcio }{\insrsid16078460 data structure
s aims to be as flexible as possible while still permitting detection of errors as close to the source as possible.  Basically, an input stream may be thought of as a sequence of tokens separated by white space, where a white space character is any of the
 
symbols blank, horizontal and vertical tab, form-feed, carriage return, and new-line.  Tokens may appear anywhere on a line and need not be separated by white space when the boundary between the tokens can be unambiguously identified (e.g., an integer fol
lowed by a left parenthesis, but not two consecutive integers).
\par   There is a limit on line length, currently set at 2048.  This is controlled by the defined constant }{\b\insrsid16078460 LINEMAX}{\insrsid16078460  in the file \'93celcio.h\'94 for those that might need to enlarge it.
\par The comment convention for a }{\i\insrsid16078460 celcio}{\insrsid16078460 
 ASCII data file is that the remainder of a line from a #-token onwards is ignored.  In addition, there is a special identifier token that is also always ignored, but the rest of the line following it is parsed.  This token is an \lquote @\rquote -sign f
ollowed by any C-identifier and formally matches the regular expression }{\f2\fs18\insrsid16078460 \'93@[_A-Za-z][_A-Za-z0-9]*\'94}{\insrsid16078460 
.  These tokens are useful if one wishes to give the field names of a structure or the type name of an object within a datafile as a form of further informatio
n for a human reader.  We will illustrate its use in some examples following the complete specification.
\par In order to rigorously define the syntax of celcio ASCIO I/O, we introduce the following inductive definition of a celcio datatype that distills the type information of a celcio specification to its barest essence.
\par }\pard \s17\qj \li1800\ri0\sb240\widctlpar\tqc\tx2610\tx2880\faauto\adjustright\rin0\lin1800\itap0 {\insrsid16078460 <type>\tab }{\lang1024\langfe1024\noproof\insrsid16078460 {\field{\*\fldinst SYMBOL 223 \\f "Wingdings" \\s 10}{\fldrslt\f10\fs20}}}{
\insrsid16078460 \tab }{\b\insrsid16078460 struct \{}{\insrsid16078460  <type}{\sub\insrsid16078460 1}{\insrsid16078460 >}{\b\insrsid16078460 ;}{\insrsid16078460  <type}{\sub\insrsid16078460 2}{\insrsid16078460 >}{\b\insrsid16078460 ; }{\insrsid16078460 
\'85 <type}{\sub\insrsid16078460 n}{\insrsid16078460 > }{\b\insrsid16078460 \}
\par }\pard \s17\qj \li1800\ri0\widctlpar\tqc\tx2610\tx2880\faauto\adjustright\rin0\lin1800\itap0 {\insrsid16078460 \tab |\tab }{\b\insrsid16078460 struct (xxx) \{}{\insrsid16078460  <type}{\sub\insrsid16078460 1}{\insrsid16078460 >}{\b\insrsid16078460 ;}{
\insrsid16078460  <type}{\sub\insrsid16078460 2}{\insrsid16078460 >}{\b\insrsid16078460 ;}{\insrsid16078460  \'85 <type}{\sub\insrsid16078460 n}{\insrsid16078460 > \}
\par \tab |\tab }{\b\insrsid16078460 list of}{\insrsid16078460  <type>
\par \tab |\tab }{\b\insrsid16078460 sequence of}{\insrsid16078460  <type>
\par \tab |\tab }{\b\insrsid16078460 array [}{\insrsid16078460 n}{\b\insrsid16078460 ] of}{\insrsid16078460  <type>
\par \tab |\tab }{\b\insrsid16078460 string}{\insrsid16078460 
\par \tab |\tab }{\b\insrsid16078460 integer
\par }{\insrsid16078460 \tab |\tab }{\b\insrsid16078460 float
\par \tab |\tab char
\par }{\insrsid16078460 \tab |\tab }{\b\insrsid16078460 enum (x}{\b\sub\insrsid16078460 1}{\b\insrsid16078460 ,x}{\b\sub\insrsid16078460 2}{\b\insrsid16078460 , \'85 x}{\b\sub\insrsid16078460 n}{\b\insrsid16078460 )
\par }\pard \s17\qj \li360\ri0\sb240\widctlpar\faauto\outlinelevel0\adjustright\rin0\lin360\itap0 {\insrsid16078460 Structures have been separated into those that are messages and thus have an associated 3-code \'93xxx\'94
, and those that are not.  To simplify matters all integers types and all float types have been collapsed into a representative \'93integer\'94 and \'93float\'94 type, and the fact that the base type of strings is
 restricted is ignored.  The type of a user-defined enum is captured in the definition by the list of 1-codes \endash  x}{\sub\insrsid16078460 1}{\insrsid16078460 , x}{\sub\insrsid16078460 2}{\insrsid16078460 , \'85 x}{\sub\insrsid16078460 n}{
\insrsid16078460  \endash  associated with each of its possible values.
\par We can now give the exact manner of encoding an instance of each type construct in the definition above followed by a brief text explaining it.
\par }\pard \s17\qj \li1800\ri0\widctlpar\tqr\tx3690\tx3870\tx4320\faauto\adjustright\rin0\lin1800\itap0 {\fs18\insrsid16078460 
\par }{\b\insrsid16078460 \tab struct \{}{\insrsid16078460  <type}{\sub\insrsid16078460 1}{\insrsid16078460 >}{\b\insrsid16078460 ;}{\insrsid16078460 \tab }{\insrsid16078460 {\field{\*\fldinst SYMBOL 222 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}{
\insrsid16078460 \tab }{\b\insrsid16078460 \{ }{\insrsid16078460 <object}{\sub\insrsid16078460 1}{\insrsid16078460 >}{\b\insrsid16078460  }{\insrsid16078460 \'85<object}{\sub\insrsid16078460 n}{\insrsid16078460 >}{\b\insrsid16078460  \}}{\insrsid16078460 

\par \tab <type}{\sub\insrsid16078460 2}{\insrsid16078460 >}{\b\insrsid16078460 ;}{\insrsid16078460 \tab \tab 
\par                             \'85\tab \tab 
\par \tab <type}{\sub\insrsid16078460 n}{\insrsid16078460 >}{\b\insrsid16078460 ;}{\insrsid16078460 \tab \tab 
\par                      }{\b\insrsid16078460 \}}{\insrsid16078460 
\par }\pard\plain \s24\qj \li1627\ri1526\sb120\sl-200\slmult0\widctlpar\brdrt\brdrs\brdrw10\brsp20\brdrcf16 \brdrl\brdrs\brdrw10\brdrcf16 \brdrb\brdrs\brdrw10\brsp20\brdrcf16 \brdrr\brdrs\brdrw10\brsp80\brdrcf16 
\tx1620\faauto\adjustright\rin1526\lin1627\rtlgutter\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 
A struct object is encoded as a token consisting of an opening curly brace, followed by the encodings of the objects for each of its fields\rquote  values in sequence, and ending with a closing curly brace token.
\par }\pard\plain \s17\qj \li1800\ri0\widctlpar\tqr\tx3690\tx3870\tx4320\faauto\adjustright\rin0\lin1800\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs18\insrsid16078460 
\par }{\b\insrsid16078460 \tab struct (xxx) \{}{\insrsid16078460  <type}{\sub\insrsid16078460 1}{\insrsid16078460 >}{\b\insrsid16078460 ;}{\insrsid16078460 \tab }{\insrsid16078460 {\field{\*\fldinst SYMBOL 222 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}{
\insrsid16078460 \tab }{\b\insrsid16078460 \{xxx }{\insrsid16078460 <object}{\sub\insrsid16078460 1}{\insrsid16078460 >}{\b\insrsid16078460  }{\insrsid16078460 \'85<object}{\sub\insrsid16078460 n}{\insrsid16078460 >}{\b\insrsid16078460  \}}{
\insrsid16078460 
\par \tab <type}{\sub\insrsid16078460 2}{\insrsid16078460 >}{\b\insrsid16078460 ;}{\insrsid16078460 \tab \tab 
\par                             \'85\tab \tab 
\par \tab <type}{\sub\insrsid16078460 n}{\insrsid16078460 >}{\b\insrsid16078460 ;}{\insrsid16078460 \tab \tab 
\par                      }{\b\insrsid16078460 \}}{\insrsid16078460 
\par }\pard\plain \s24\qj \li1627\ri1526\sb120\sl-200\slmult0\widctlpar\brdrt\brdrs\brdrw10\brsp20\brdrcf16 \brdrl\brdrs\brdrw10\brdrcf16 \brdrb\brdrs\brdrw10\brsp20\brdrcf16 \brdrr\brdrs\brdrw10\brsp80\brdrcf16 
\tx1620\faauto\adjustright\rin1526\lin1627\rtlgutter\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 A message struct object is encoded as a 4-letter token consisting of an opening curly brace and the message\rquote 
s 3-code, followed by the encodings of the objects for each of its fields\rquote  values in sequence, and ending with a closing curly brace token.
\par }\pard\plain \s17\qj \li1800\ri0\widctlpar\tqr\tx3690\tx3870\tx4320\faauto\adjustright\rin0\lin1800\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs18\insrsid16078460 
\par }{\b\insrsid16078460 \tab list of}{\insrsid16078460   <type>\tab }{\insrsid16078460 {\field{\*\fldinst SYMBOL 222 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}{\insrsid16078460 \tab }{\b\insrsid16078460 (}{\insrsid16078460  <object}{\sub\insrsid16078460 1}{
\insrsid16078460 >}{\b\insrsid16078460  }{\insrsid16078460 <object}{\sub\insrsid16078460 2}{\insrsid16078460 >}{\b\insrsid16078460  }{\insrsid16078460 \'85<object}{\sub\insrsid16078460 n}{\insrsid16078460 >}{\b\insrsid16078460  )}{\insrsid16078460 
\par }\pard\plain \s24\qj \li1627\ri1526\sb120\sl-200\slmult0\widctlpar\brdrt\brdrs\brdrw10\brsp20\brdrcf16 \brdrl\brdrs\brdrw10\brdrcf16 \brdrb\brdrs\brdrw10\brsp20\brdrcf16 \brdrr\brdrs\brdrw10\brsp80\brdrcf16 
\tx1620\faauto\adjustright\rin1526\lin1627\rtlgutter\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 A list object is encoded as a t
oken consisting of an opening parenthesis, followed by a series of the encodings of the objects in the list, and ending with a closing parenthesis token.
\par }\pard\plain \s17\qj \li1800\ri0\widctlpar\tqr\tx3690\tx3870\tx4320\faauto\adjustright\rin0\lin1800\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs18\insrsid16078460 
\par }{\b\insrsid16078460 \tab sequence of}{\insrsid16078460   <type>\tab }{\insrsid16078460 {\field{\*\fldinst SYMBOL 222 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}{\insrsid16078460 \tab }{\b\f2\fs18\insrsid16078460 \'93\\}{\b\f42\insrsid16078460 "}{
\b\f2\fs18\insrsid16078460 [0-9]*\'94}{\insrsid16078460  <object}{\sub\insrsid16078460 1}{\insrsid16078460 >}{\b\insrsid16078460  }{\insrsid16078460 <object}{\sub\insrsid16078460 2}{\insrsid16078460 >}{\b\insrsid16078460  }{\insrsid16078460 \'85<object}{
\sub\insrsid16078460 n}{\insrsid16078460 >}{\b\insrsid16078460  }{\b\f42\insrsid16078460 "}{\insrsid16078460 
\par }\pard\plain \s24\qj \li1627\ri1526\sb120\sl-200\slmult0\widctlpar\brdrt\brdrs\brdrw10\brsp20\brdrcf16 \brdrl\brdrs\brdrw10\brdrcf16 \brdrb\brdrs\brdrw10\brsp20\brdrcf16 \brdrr\brdrs\brdrw10\brsp80\brdrcf16 
\tx1620\faauto\adjustright\rin1526\lin1627\rtlgutter\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 
A sequence object is encoded as a token consisting of a double quote optionally followed by an unsigned integer, followed by a series of the encodings of the objects in the sequence, and ending with double quote.  The integer, if present, tells }{
\i\insrsid16078460 celcio}{\insrsid16078460  how big a block to initially allocate for the sequence \endash 
 this helps the memory manager accommodate the variable-length nature of a sequence.  It is, of course, best if this integer is greater than or equal to the actual length.
\par }\pard\plain \s17\qj \li1800\ri0\widctlpar\tqr\tx3690\tx3870\tx4320\faauto\adjustright\rin0\lin1800\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs18\insrsid16078460 
\par }{\b\insrsid16078460 \tab array [}{\insrsid16078460 n}{\b\insrsid16078460 ] of}{\insrsid16078460   <type>\tab }{\insrsid16078460 {\field{\*\fldinst SYMBOL 222 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}{\insrsid16078460 \tab }{\b\insrsid16078460 [}{
\insrsid16078460  <object}{\sub\insrsid16078460 1}{\insrsid16078460 >}{\b\insrsid16078460  }{\insrsid16078460 object}{\sub\insrsid16078460 2}{\insrsid16078460 >}{\b\insrsid16078460  }{\insrsid16078460 \'85<object}{\sub\insrsid16078460 n}{\insrsid16078460 
> }{\b\insrsid16078460 ]}{\insrsid16078460 
\par }\pard\plain \s24\qj \li1627\ri1526\sb120\sl-200\slmult0\widctlpar\brdrt\brdrs\brdrw10\brsp20\brdrcf16 \brdrl\brdrs\brdrw10\brdrcf16 \brdrb\brdrs\brdrw10\brsp20\brdrcf16 \brdrr\brdrs\brdrw10\brsp80\brdrcf16 
\tx1620\faauto\adjustright\rin1526\lin1627\rtlgutter\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 
An array object is encoded as a token consisting of an opening square bracket, followed by a series of the encodings of the objects in the array, and ending with a closing square bracket token.
\par }\pard\plain \s17\qj \li1800\ri0\widctlpar\tqr\tx3690\tx3870\tx4320\faauto\adjustright\rin0\lin1800\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs18\insrsid16078460 
\par }{\b\insrsid16078460 \tab string}{\insrsid16078460 \tab }{\insrsid16078460 {\field{\*\fldinst SYMBOL 222 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}{\insrsid16078460 \tab }{\b\f2\fs18\insrsid16078460 \'93\\}{\b\f42\insrsid16078460 "}{
\b\f2\fs18\insrsid16078460 [0-9]*\'94}{\insrsid16078460   <char}{\sub\insrsid16078460 1}{\insrsid16078460 >}{\b\insrsid16078460  }{\insrsid16078460 <char}{\sub\insrsid16078460 2}{\insrsid16078460 >}{\b\insrsid16078460  }{\insrsid16078460  \'85<char}{
\sub\insrsid16078460 n}{\insrsid16078460 >}{\b\insrsid16078460  }{\b\f42\insrsid16078460 "}{\b\insrsid16078460 
\par }\pard\plain \s24\qj \li1627\ri1526\sb120\sl-200\slmult0\widctlpar\brdrt\brdrs\brdrw10\brsp20\brdrcf16 \brdrl\brdrs\brdrw10\brdrcf16 \brdrb\brdrs\brdrw10\brsp20\brdrcf16 \brdrr\brdrs\brdrw10\brsp80\brdrcf16 
\tx1620\faauto\adjustright\rin1526\lin1627\rtlgutter\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 
A string object is encoded as a token consisting of double quote optionally followed by an unsigned integer, followed by a series of the chars terminated by a double quote token. .  The integer, if present, tells }{\i\insrsid16078460 celcio}{
\insrsid16078460  how big a block to allocate for the string \endash  the number of characters in the sequence must not be greater than this integer (but may be less than it).
\par }\pard\plain \s17\qj \li1800\ri0\widctlpar\tqr\tx3690\tx3870\tx4320\faauto\adjustright\rin0\lin1800\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs18\insrsid16078460 
\par }{\b\insrsid16078460 \tab integer\tab }{\insrsid16078460 {\field{\*\fldinst SYMBOL 222 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}{\b\fs24\insrsid16078460 \tab }{\fs24\insrsid16078460 \'93}{\insrsid16078460 C integer constant\'94 ( }{
\b\f2\fs18\insrsid16078460 \'93-?[0-9]+\'94}{\insrsid16078460  )
\par }\pard\plain \s24\qj \li1627\ri1526\sb120\sl-200\slmult0\widctlpar\brdrt\brdrs\brdrw10\brsp20\brdrcf16 \brdrl\brdrs\brdrw10\brdrcf16 \brdrb\brdrs\brdrw10\brsp20\brdrcf16 \brdrr\brdrs\brdrw10\brsp80\brdrcf16 
\tx1620\faauto\adjustright\rin1526\lin1627\rtlgutter\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 An integer object is encoded according to C conventions for integer constants.
\par }\pard\plain \s17\qj \li1800\ri0\widctlpar\tqr\tx3690\tx3870\tx4320\faauto\adjustright\rin0\lin1800\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs18\insrsid16078460 
\par }{\insrsid16078460 \tab }{\b\insrsid16078460 float}{\insrsid16078460 \tab }{\insrsid16078460 {\field{\*\fldinst SYMBOL 222 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}{\insrsid16078460 \tab \'93C floating point constant\'94
\par }{\b\insrsid16078460 \tab \tab \tab }{\insrsid16078460  (}{\b\insrsid16078460  }{\b\f2\fs16\insrsid16078460 \'93([0-9]+(\\.[0-9]*)?|\\.[0-9]+)([eE][+-]?[0-9]+)?\'94}{\insrsid16078460  )
\par }\pard\plain \s24\qj \li1627\ri1526\sb120\sl-200\slmult0\widctlpar\brdrt\brdrs\brdrw10\brsp20\brdrcf16 \brdrl\brdrs\brdrw10\brdrcf16 \brdrb\brdrs\brdrw10\brsp20\brdrcf16 \brdrr\brdrs\brdrw10\brsp80\brdrcf16 
\tx1620\faauto\adjustright\rin1526\lin1627\rtlgutter\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 A floating point object is encoded according to C conventions for floating point constants.
\par }\pard\plain \s17\qj \li1800\ri0\widctlpar\tqr\tx3690\tx3870\tx4320\faauto\adjustright\rin0\lin1800\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs18\insrsid16078460 
\par }{\insrsid16078460 \tab }{\b\insrsid16078460 char}{\insrsid16078460 \tab }{\insrsid16078460 {\field{\*\fldinst SYMBOL 222 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}{\b\fs24\insrsid16078460 \tab }{\b\f2\fs18\insrsid16078460 \'93([!-~]-[ @#(\'93\\])|\\\\[\\
001-\\177]|\\\\[0-7]* \'94}{\f2\fs18\insrsid16078460 
\par }\pard\plain \s24\qj \li1627\ri1526\sb120\sl-200\slmult0\widctlpar\brdrt\brdrs\brdrw10\brsp20\brdrcf16 \brdrl\brdrs\brdrw10\brdrcf16 \brdrb\brdrs\brdrw10\brsp20\brdrcf16 \brdrr\brdrs\brdrw10\brsp80\brdrcf16 
\tx1620\faauto\adjustright\rin1526\lin1627\rtlgutter\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 
A character object is encoded as either (a) its ASCII character if it is a printable character other than blank, backslash, double quote, at-sign, pound-sign or left paren, (b) a backslash followed by an character (printable or not), or (c) a backslash an
d the ASCII octal encoding of the symbol.
\par }\pard\plain \s17\qj \li1800\ri0\widctlpar\tqr\tx3690\tx3870\tx4320\faauto\adjustright\rin0\lin1800\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs18\insrsid16078460 
\par }{\b\insrsid16078460 \tab enum (x}{\b\sub\insrsid16078460 1}{\b\insrsid16078460 , x}{\b\sub\insrsid16078460 2}{\b\insrsid16078460 , \'85, x}{\b\sub\insrsid16078460 n}{\b\insrsid16078460 )}{\insrsid16078460 \tab }{\insrsid16078460 {\field{\*\fldinst SYMBOL
 222 \\f "Symbol" \\s 10}{\fldrslt\f3\fs20}}}{\b\fs24\insrsid16078460 \tab }{\b\f2\fs18\insrsid16078460 \'93[x}{\b\f2\fs18\sub\insrsid16078460 1}{\b\f2\fs18\insrsid16078460 x}{\b\f2\fs18\sub\insrsid16078460 2}{\b\f2\fs18\insrsid16078460 \'85x}{
\b\f2\fs18\sub\insrsid16078460 n}{\b\f2\fs18\insrsid16078460 ]\'94}{\f2\fs18\insrsid16078460 
\par }\pard\plain \s24\qj \li1627\ri1526\sb120\sl-200\slmult0\widctlpar\brdrt\brdrs\brdrw10\brsp20\brdrcf16 \brdrl\brdrs\brdrw10\brdrcf16 \brdrb\brdrs\brdrw10\brsp20\brdrcf16 \brdrr\brdrs\brdrw10\brsp80\brdrcf16 
\tx1620\faauto\adjustright\rin1526\lin1627\rtlgutter\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 
An enum object is encoded as the character corresponding to one of the 1-codes chosen to denote its particular range of values.
\par }\pard\plain \s17\qj \li360\ri0\sb120\widctlpar\faauto\outlinelevel0\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 There is one variati
on on the rules above: when a message struct is being used as a subcomponent of another message and there is only one 3-code for the given message struct, then one may omit the 3-code that usually follows the open curly brace, as it can be inferred from c
ontext.
\par A small difficulty with ASCI format is that a slight bit of precision is lost on floating point values when they are written out, about \'bd digit.
\par While sequence types can create some potentially inefficiencies with regards to memory management, this 
is only true if the input does not contain a size prefix that gives the length or a reasonable upper-bound on the length of the sequence.   One should note carefully, that }{\i\insrsid16078460 celcio}{\insrsid16078460 \rquote 
s writers always output  the length of a sequence as part of its ASCII representation, therefore, the only time sequences should present any loss of efficiency is the first time they are consumed by a }{\i\insrsid16078460 celcio}{\insrsid16078460 
-implemented IO utility. 
\par We close with several examples of how the same Fragment message (our running example from Figure 1) 
might be encoded within the above framework.  In the first case, the message is verbose in that every field name is commented and lots of white space is used.  In the second case, comments are ommited and a terser layout is employed.  Finally, in the last
 example, the instance is encoded with as few characters as possible, insert white space only where necessary.
\par }\pard \s17\qj \li2160\ri0\widctlpar\faauto\adjustright\rin0\lin2160\itap0 {\f2\fs16\insrsid16078460 
\par \{SFG                 # Encoding of a fragment record
\par @act A
\par @acc 1700006130
\par @iac 232
\par @seq \'93Crazy\\ man\'94
\par @qlt [1 1 1 1 1 2 3 3 3]
\par @scn (
\par     \{ @what  1
\par       @beg   0
\par       @end   5
\par     \}
\par     \{ @what  3
\par       @beg   6
\par       @end   9
\par     \}
\par   )
\par \}
\par 
\par \{SFG A
\par  1700006130 232
\par  \'93Crazy\\ man\'94
\par  [1 1 1 1 1 2 3 3 3]
\par  ( \{1 0 5\} \{3 6 9\} )
\par \}
\par 
\par \{SFGA1700006130 232\'94Crazy\\ man\'94[1 1 1 1 1
\par 2 3 3 3](\{1 0 5\}\{3 6 9\})\}
\par }\pard\plain \s18\ql \li0\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin0\itap0 \b\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 
\par }\pard \s18\ql \li0\ri0\sb120\widctlpar\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 {\insrsid16078460 AUTHORS
\par }\pard\plain \s17\qj \li360\ri0\sb120\widctlpar\faauto\outlinelevel0\adjustright\rin0\lin360\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid16078460 {\*\bkmkstart _Hlt435346562}Gene Myers: }{\f40\insrsid16078460 
\par }\pard \s17\qj \li360\ri0\sb120\widctlpar\faauto\adjustright\rin0\lin360\itap0 {\f40\insrsid16078460 {\*\bkmkend _Hlt435346562}Created November 30, \lquote 99
\par }}