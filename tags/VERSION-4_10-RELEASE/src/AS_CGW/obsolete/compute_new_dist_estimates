  // This is the loop that attempts to compute new dist estimates, then construct a new
  // contig graph using those estimates.
  if (0)
  {
	VA_TYPE(CIEdgeT) *tempEdges;
	CDS_CID_t icnt;
	int insertionCount = 0;
	time_t t = time(0);
	int *nonCanonicalEdges;
	
	if (0)
	{
	  fprintf( GlobalData->stderrc, "====> Recomputing mate pair stats at %s\n", ctime(&t));
	  
	  fprintf(GlobalData->stderrc,"* Calling ComputeMatePairStatisticsRestricted (SCAFFOLD_OPERATIONS)\n");
	  fflush(stderr);
	  ComputeMatePairStatisticsRestricted( SCAFFOLD_OPERATIONS, minSamplesForOverride /* update distance estimates */,
								 "scaffold_update");
	}
	
	


	// remove for normal running /*** mjf ***/
	{
	  DistT *dptr;
	  CDS_CID_t icnt;
	  
	  dptr = GetDistT(ScaffoldGraph->Dists, 10);
	  dptr->mean = 52000;
	  dptr->stddev = 10000.0;
	  dptr = GetDistT(ScaffoldGraph->Dists, 11);
	  dptr->mean = 52000;
	  dptr->stddev = 10000.0;
	  dptr = GetDistT(ScaffoldGraph->Dists, 12);
	  dptr->mean = 52000;
	  dptr->stddev = 10000.0;
	  dptr = GetDistT(ScaffoldGraph->Dists, 15);
	  dptr->mean = 60000;
	  dptr->stddev = 10000.0;
	  
	  for (icnt = 0; icnt < GetNumDistTs(ScaffoldGraph->Dists); icnt++)
	  {
		dptr = GetDistT(ScaffoldGraph->Dists, icnt);
		fprintf( stderr, "before rebuilding contig graph, lib: " F_CID ", dptr->mean: %f, dptr->stddev: %f\n",
				 icnt, dptr->mean, dptr->stddev);
	  }
	}
        



#if 1  
	// GetNumGraphEdges(graph->CIGraph);
	// reset (clear) edges array in ContigGraph
	
	// DeleteVA_EdgeCGW_T( ScaffoldGraph->ContigGraph->edges);
	// ScaffoldGraph->ContigGraph->edges = CreateVA_EdgeCGW_T( GetNumGraphEdges( ScaffoldGraph->CIGraph));
	// instead of deleting and creating as above:
	// 1. create a new edge array
	// 2. copy over only the overlap edges (clearing apropos fields while copying)
	// 3. replace the old array with the new
	// 4. step through new array using InsertGraphEdge to put edges in list
	// 5. BuildGraphEdgesDirectly and MergeAllGraphEdges as below
	
	// 1. create a new edge array
	tempEdges = CreateVA_EdgeCGW_T( GetNumGraphEdges( ScaffoldGraph->ContigGraph));
	nonCanonicalEdges = (int *) safe_calloc( GetNumGraphEdges( ScaffoldGraph->ContigGraph), sizeof (int));
	
	// 2. copy over only the overlap edges (clearing apropos fields while copying)
	for (icnt = 0; icnt < GetNumGraphEdges( ScaffoldGraph->ContigGraph); icnt++)
	{
	  CIEdgeT *edge = GetGraphEdge(ScaffoldGraph->ContigGraph, icnt);
	  
	  if (edge->idA == NULLINDEX || edge->idB == NULLINDEX || edge->flags.bits.isDeleted)
		continue;
	  
	  if (!edge->flags.bits.isRaw) // want only raw edges
		continue;
	  
	  // want only overlap edges - look at isOverlapEdge
	  if (!(isOverlapEdge(edge)))
		continue;
	  
	  if (GetGraphNode( ScaffoldGraph->ContigGraph, edge->idA)->flags.bits.isDead == TRUE ||
		  GetGraphNode( ScaffoldGraph->ContigGraph, edge->idB)->flags.bits.isDead == TRUE)
		continue;
	  
	  if (edge->idA > edge->idB)
		continue;
	  
	  if (insertionCount < 10)
	  {
		fprintf( stderr, "icnt: " F_CID ", insertionCount: %d, edge->idA: " F_CID ", edge->idB: " F_CID "\n",
				 icnt, insertionCount, edge->idA, edge->idB);
	  }
	  
	  if (edge->idA > edge->idB)
		nonCanonicalEdges[insertionCount] = TRUE;
	  
	  edge->nextRawEdge = NULLINDEX;
	  edge->topLevelEdge = NULLINDEX;  // points to parent edge 
	  AppendEdgeCGW_T( tempEdges, edge);
	  insertionCount++;
	}
	
	// 3. replace the old array with the new
	DeleteVA_EdgeCGW_T( ScaffoldGraph->ContigGraph->edges);
	ScaffoldGraph->ContigGraph->edges = tempEdges;
	
	// set contig edge headers to NULLINDEX
	for (icnt = 0; icnt < GetNumGraphNodes( ScaffoldGraph->ContigGraph); icnt++)
	{
	  ContigT *contig = GetGraphNode( ScaffoldGraph->ContigGraph, icnt);
	  contig->edgeHead = NULLINDEX;
	  contig->numEssentialA = contig->numEssentialB = 0;
	  contig->essentialEdgeA = contig->essentialEdgeB = NULLINDEX;
	  contig->AEndNext = contig->BEndNext = NULLINDEX;
	}
	
	// 4. step through new array using InsertGraphEdge to put edges in list	  
	for( icnt = 0; icnt < insertionCount; icnt++)
	{
	  CIEdgeT *edge = GetGraphEdge(ScaffoldGraph->ContigGraph, icnt);
	  
	  // if (icnt < 1000)
	  if (edge->idA > edge->idB)
	  {
		fprintf( stderr, "icnt: " F_CID ", edge->idA: " F_CID ", edge->idB: " F_CID ", edge->orient %c  %s\n",
                         icnt, edge->idA, edge->idB, edge->orient, edge->idA < edge->idB ? " " : "*");
	  }
	  
	  edge->topLevelEdge = icnt;  // ask Saul
	  
	  if (nonCanonicalEdges[icnt] == TRUE)
	  {
		int temp = edge->idA;
		edge->idA = edge->idB;
		edge->idB = temp;
	  }
	  
	  InsertGraphEdge( ScaffoldGraph->ContigGraph, icnt, FALSE);
	}
	
	for( icnt = 0; icnt < insertionCount; icnt++)
	{
	  CIEdgeT *edge = GetGraphEdge(ScaffoldGraph->ContigGraph, icnt);
	  
	  if (nonCanonicalEdges[icnt] == TRUE)
	  {
		int temp = edge->idA;
		edge->idA = edge->idB;
		edge->idB = temp;
	  }
	}
	
	// reset the other fields associated with edges in the ContigGraph
	// graph->edges = NULL;
	ScaffoldGraph->ContigGraph->numActiveEdges = 0;
	ScaffoldGraph->ContigGraph->freeEdgeHead = NULLINDEX;
	ScaffoldGraph->ContigGraph->tobeFreeEdgeHead = NULLINDEX;
	
	BuildGraphEdgesDirectly(ScaffoldGraph->ContigGraph);
	// ComputeOverlaps( ScaffoldGraph->ContigGraph, TRUE, alignOverlaps);
	CheckEdgesAgainstOverlapper(ScaffoldGraph->ContigGraph);
	
#ifdef FIX_CONTIG_EDGES
        fprintf(GlobalData->stderrc, "VALIDATING ALL CONTIG EDGES...\n");
        ValidateAllContigEdges(ScaffoldGraph, FIX_CONTIG_EDGES);
#endif
	// this combines raw edges and forms top-level edges
	MergeAllGraphEdges(ScaffoldGraph->ContigGraph, FALSE);
	
	t = time(0);
	fprintf(GlobalData->stderrc,"**** Running RebuildScaffolds **** at %s\n", ctime(&t));
	fflush(stderr);
	RebuildScaffolds(ScaffoldGraph, TRUE);
	// BuildScaffoldsFromFirstPriniciples( ScaffoldGraph, FALSE);
        
#if defined(CHECK_CONTIG_ORDERS) || defined(CHECK_CONTIG_ORDERS_INCREMENTAL)
        fprintf(stderr,
                "---Checking contig orders after RebuildScaffolds\n\n");
        CheckAllContigOrientationsInAllScaffolds(ScaffoldGraph, coc, 1);
#endif
#ifdef CHECK_CONTIG_ORDERS_INCREMENTAL
        ResetContigOrientChecker(coc);
        AddAllScaffoldsToContigOrientChecker(ScaffoldGraph, coc);
#endif
#endif // #if 1
  }
