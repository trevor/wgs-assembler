#!/usr/bin/perl -w
#
###########################################################################
#
# This file is part of Celera Assembler, a software program that 
# assembles whole-genome shotgun reads into contigs and scaffolds.
# Copyright (C) 1999-2004, Applera Corporation. All rights reserved.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received (LICENSE.txt) a copy of the GNU General Public 
# License along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
###########################################################################
#
#********************************************************************
#        Script:  
#   Description:  Perl script that generate a .sim file 
#                 run the script sim2cbg on it
#    Programmer:  S. Lonardi (stelo@cs.purdue.edu)
#       Written:  10 June 99
#  Last Revised:  10 June 99
#********************************************************************

#---- read the filename

if ($#ARGV != 7) {
  print << "EOF";
  $0: wrong number of parameters
  usage: $0 [file] [coverage] [sequencing error prob] [mutation prob] [num_reps] [rep_size] [rand_seq_size] [genome_size]
EOF
  exit 0;
}

#---- open the file

$filename = $ARGV[0];
$coverage = $ARGV[1];
$sequencing_error = $ARGV[2];
$mutation_error = $ARGV[3];
$num_repeats=$ARGV[4];
$repeat_size = $ARGV[5];
$random_sequence_size = $ARGV[6];
$genome_size = $ARGV[7];
print "----> Running $0 on $filename, coverage $coverage x\n";
print "      sequencing error prob $sequencing_error, mutation prob $mutation_error\n";
open(F,">$filename.sim") or die "Could not open file\n";

#---- fixed parameters
$seed = 666;
$min_length_fragment = 500;
$max_length_fragment = 500; 
$fragments = $genome_size * $coverage / $min_length_fragment;  #10000;
print "      Fragments $fragments\n";
$min_seq_error = $sequencing_error; #.001;
$max_seq_error = $sequencing_error; #.001;

#---- create a readable date output

@time_array = localtime;
$thisday = (Sun,Mon,Tue,Wed,Thu,Fri,Sat)[(localtime)[6]];
@month = (Jan,Feb,Mar,Apr,May,June,July,Aug,Sept,Oct,Nov,Dec);
$month = $month[$time_array[4]];
$user = getlogin;
$comment = "\$generated by $user at $time_array[2]:$time_array[1]:$time_array[0] - $thisday $month $time_array[3] $time_array[5]\$";

#---- flush the .sim file

$| = 1;
flock (F, 2);
print F << "EOF";
.comment $comment
.seed
$seed
.dna
C ~ $repeat_size;
L = $random_sequence_size;
M = L C L;
Z = $genome_size
M o(0.5) m($mutation_error,$mutation_error) !($num_repeats)
;
.sample
$fragments
$min_length_fragment $max_length_fragment 0.5
0 0 0 0
$min_seq_error $max_seq_error .33 .33
.999 1800 2200 .01
EOF

#---- close it

flock (F, 8);

#---- run the stuff

print "----> Running CELSIM\n";
$o = `celsim $filename.sim`;
print $o;

while( ! -e "$filename.frg"){;}

print "----> Running GATEKEEPER\n";
$o = `gatekeeper -f $filename-GKP $filename.frg`;
print $o;

while( ! -e "$filename.inp"){;}

print "----> Running OVERLAP\n";
$o = `/usr/bin/nice -n 15 overlap -t4 -f $filename-OVL $filename.inp`;
print $o;

while( ! -e "$filename.ovl"){;}


print "----> Running UNITIGGER\n";
$o = `unitigger -A -P -f $filename-OVL $filename.ovl`;
print $o;

while( ! -e "$filename.cga"){;}
