#!/usr/local/bin/bash
#
###########################################################################
#
# This file is part of Celera Assembler, a software program that 
# assembles whole-genome shotgun reads into contigs and scaffolds.
# Copyright (C) 1999-2004, Applera Corporation. All rights reserved.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received (LICENSE.txt) a copy of the GNU General Public 
# License along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
###########################################################################
#
#
# Usage: $ assembler arg1
#
# arg1 : The first argument is the file name for a .frg file starting 
#        with ADT message and followed by a batch of FRG, DST and ILK
#        messages to be processed.
#
#######################################################################
#
# The modules of the Celera Assembler have a set of common command line
# arguments that are used in the production mode.  In fact, all
# command line arguments that are intended to be used in the production
# shown have unique meanings.
#
#######################################################################
#
prefix=${1%%.frg}

REPEAT_LIB="${AS_ROOT}/lib/$prefix.lib"
if [ ! -e ${REPEAT_LIB} ]; then
  REPEAT_LIB="${AS_ROOT}/lib/drosophila_repeats.lib" ;
fi

AS_BIN="${AS_ROOT}/bin"
TIMER="/usr/bin/time"
#
OUTPUT_MODE="-P"
OLD_OUTPUT_MODE="-P"
OLD_CREATE_MODE="-f"
NEW_CREATE_MODE="-c -f"
# The -f option is used to clobber an existant store with the same name.
# The -c option is used to create an empty store.
#
# CELSIM_CMD="${AS_BIN}/celsim"
GATEKEEPER_CMD="${AS_BIN}/gatekeeper -X -C -N -Q ${OUTPUT_MODE} ${OLD_CREATE_MODE}"
#URCSCREENER_CMD="${AS_BIN}/urc_screener -ra ${OLD_OUTPUT_MODE} ${REPEAT_LIB}"
URCSCREENER_CMD="${AS_BIN}/urc_screener -r -f -s ${OLD_OUTPUT_MODE} ${REPEAT_LIB}"
OVERLAP_CMD="${AS_BIN}/overlap -w ${OUTPUT_MODE} ${OLD_CREATE_MODE}"
REAPER_CMD1="${AS_BIN}/fgb ${OUTPUT_MODE} -A 2 -x 1 -z 10 -d 0 -M 0"
UNITIGGER_CMD2="${AS_BIN}/fgb ${OUTPUT_MODE} -A 2 -d 1 -M 1"
UNITIGGER_CMD3="${AS_BIN}/cgb ${OUTPUT_MODE} -A 2 -j 5 -b 0"
UNITIGGER_CMD4="${AS_BIN}/consensus ${OUTPUT_MODE} -U -z"
UNITIGGER_CMD5="${AS_BIN}/AS_CGB_fom2uom ${OUTPUT_MODE}"
CGW_CMD="${AS_BIN}/cgw -c -j 1 -k 5 -w 1 -s 2 -r 4 ${OUTPUT_MODE}"
#CGW_CMD="${AS_BIN}/cgw -c -w 1 -s 2 -r 3 -T ${OUTPUT_MODE}"
CONSENSUS_CMD="${AS_BIN}/consensus ${OUTPUT_MODE} ${CNSopts}"
TERMINATOR_CMD="${AS_BIN}/terminator -P"
# TESTER_CMD="${AS_BIN}/tester -h"
#
#
echo "Began the Celera Assembler at " `date` " in " `pwd` "."
echo "By the way, this script depends on AS_ROOT=$AS_ROOT"
echo ""
#number_of_fragments="`grep "{FRG" $prefix.frg | wc -l `"
#echo "The input file $prefix.frg has $number_of_fragments fragment records."
#
# Count the number of overlaps in the batch
countmessages < $prefix.frg > $prefix.cnt
number_of_fragments=`gawk '/FRG/ { print $3}' $prefix.cnt`
#echo "The input file $prefix.frg has $number_of_fragments fragment records."
echo ""
#
echo "=========== GKP: gatekeeper ====================="
echo "  $prefix.gkpStore is the gatekeeper store directory"
if $TIMER $GATEKEEPER_CMD $prefix.Store $prefix.frg 2> $prefix.log
then echo "gatekeeper successful" ; else echo "fatal error" ; exit 1 ; fi
echo ""
echo "=========== URT: screen for ubiquitous repeats =="
echo "  $REPEAT_LIB is the screen item library"
if $TIMER $URCSCREENER_CMD $prefix.inp 2>> $prefix.log
then echo "urc_screener successful" ; else echo "fatal error" ; exit 1 ; fi
echo ""
echo "=========== OVL: Create overlap records ========="
echo "  $prefix.frgStore is the fragment store directory"
if $TIMER $OVERLAP_CMD $prefix.frgStore $prefix.urc 2>> $prefix.log
then echo "overlap successful" ; else echo "fatal error" ; exit 1 ; fi
echo ""
echo "=========== FGB: Reaper ======="
if $TIMER $REAPER_CMD1 -c -f -o $prefix.reaperStore1 $prefix.ovl 2>> $prefix.log
then echo "unitigger fgb successful" ; else echo "fatal error" ; exit 1 ; fi
echo ""
echo "End of the incremental assembler. Beginning of the snapshot assembler."
#echo ""
echo "=========== FGB: Reaper (containment fix) ======="
if $TIMER $REAPER_CMD1 -Q -i $prefix.reaperStore1 -f -o $prefix.reaperStore2 $prefix.ovl 2>> $prefix.log
then echo "unitigger fgb successful" ; else echo "fatal error" ; exit 1 ; fi
echo ""
echo "=========== FGB: transitively inferrable edge marking ======="
echo "  $prefix.fgbStore is the overlap store directory"
if $TIMER $UNITIGGER_CMD2 -i $prefix.reaperStore2 -f -o $prefix.fgbStore 2>> $prefix.log
then echo "unitigger fgb successful" ; else echo "fatal error" ; exit 1 ; fi
echo ""
echo "=========== CGB: chunk graph builder ============"
#echo "  $prefix.Store is the overlap store directory"
if $TIMER $UNITIGGER_CMD3 $prefix.frgStore $prefix.fgbStore 2>> $prefix.log
then echo "unitigger cgb successful" ; else echo "fatal error" ; exit 1 ; fi
if $TIMER $UNITIGGER_CMD4 $prefix.frgStore $prefix.cgb 2>> $prefix.log
then echo "unitigger consensus successful" ; else echo "fatal error" ; exit 1 ; fi
if $TIMER $UNITIGGER_CMD5 < $prefix.cgi > $prefix.utg 2>> $prefix.log
then echo "unitigger (post-fom2uom) successful" ; else echo "fatal error" ; exit 1 ; fi
echo ""
echo "=========== CGW: chunk graph walker ============="
if $TIMER $CGW_CMD -g $prefix.gkpStore -f $prefix.frgStore -o $prefix $prefix.utg 2>> $prefix.log
then echo "cgw successful" ; else echo "fatal error" ; exit 1 ; fi
echo ""
echo "=========== CNS: consensus builder  ============="
if $TIMER $CONSENSUS_CMD $prefix.frgStore $prefix.cgw 2>> $prefix.log
then echo "consensus successful" ; else echo "fatal error" ; exit 1 ; fi
echo ""
# echo "=========== TST: tester ========================="
# if $TIMER $TESTER_CMD $prefix 2>> $prefix.log
# then echo "tester successful" ; else echo "tester unsuccessful"; fi
# echo ""
echo "=========== TER: terminator ====================="
if $TIMER $TERMINATOR_CMD -g $prefix.gkpStore -f $prefix.frgStore -i $prefix.cns -o $prefix.asm -m $prefix.map 2>> $prefix.log
then echo "Terminator successful" ; else echo "fatal error" ; exit 1 ; fi
echo ""
#echo "Clean the directory of working files *.inp *.ovl *.cgb *cgw."
echo "Assembler finished at " `date` 
