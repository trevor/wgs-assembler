#!/usr/bin/perl
#
###########################################################################
#
# This file is part of Celera Assembler, a software program that 
# assembles whole-genome shotgun reads into contigs and scaffolds.
# Copyright (C) 1999-2004, Applera Corporation. All rights reserved.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received (LICENSE.txt) a copy of the GNU General Public 
# License along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
###########################################################################
#
#
#  Use this to launch multiple consensus partition jobs on queue
#  Requires 1) that the executable belocated in the working directory
#           2) all .cgb input be located in working directory
#           3) script is run from desired working directory
#              (a current working directory
#              call is made to assign a value to the working directory
#              for the batch jobs)
#
#  Usage:    submit_consensus prefix queue_name start_batch# end_batch#
#
#  Fine tune to suit, then uncomment the 'system($cmd)' line to
# actually run with the submits

# 
#
#

umask 2;
use Cwd;

if  ( $#ARGV != 5 ) {
  print "\nUsage:\n";
  print "submit_SDBPartitioned_consensus queue prefix SDB_revision start_partition end_partition cns_binary\n\n";
  exit(0);
}
$q = $ARGV[0]; # queue name
$prefix = $ARGV[1]; # the data set prefix
$revision = $ARGV[2]; # the revision of the SDB which generated the partition
$s = $ARGV[3]; # starting partition
$e = $ARGV[4]; # ending parition
$cnsbin = $ARGV[5]; #path qualified consensus executable

$prod = cwd();  # path to working directory

# $asbin = ".";  # path to executable
# $asbin = $ENV{AS_BIN};
print "Consensus exectuable to use = $cnsbin\n";


if ( ! -e "$prod/batch_errfiles" ) {
  mkdir "$prod/batch_errfiles",0755;
}

for($i=$s; $i<=$e;$i=$i+1){
    print "Batch $i of contigs\n";
    $subcmd = sprintf("cd %s; umask 2; ulimit -c 0 ; %s -P -s %s.SeqStore -V %d -p %d -S %d -m -o %s.cns_contigs.%d %s.frgStore_part %s.cgw_contigs.%d",$prod,$cnsbin,$prefix,$revision,$i,$i,$prefix,$i,$prefix,$prefix,$i);
  print "$subcmd\n";
  
  $cmd = sprintf("bsub -q %s -P \"IR:HUM_ASM:L\" -J /Assembly/cns_%s_%03d -o %s/batch_errfiles/batch%d.err -R \"rusage[physmem=1000]\" '%s'",$q,$prefix,$i,$prod,$i,$subcmd);

# $cmd = sprintf("batch <<EOB\n %s >& batch_errfiles/batch%03d.err \nEOB\n",$subcmd,$i);

 print "$cmd\n";
 system($cmd);
}
